{
  "contractName": "CertificateStore",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "name": "CertificateStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "TrustedIssuer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "UntrustedIssuer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "addIssuer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "_certHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_pretendedOwner",
          "type": "address"
        }
      ],
      "name": "authenticateHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "authenticated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "authenticatedCertificateId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "certificates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "organization",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "trusted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            }
          ],
          "internalType": "struct CertificateStoreCore.Issuer",
          "name": "issuer",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "certificateHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "issuedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isTrustedIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_certHash",
          "type": "string"
        }
      ],
      "name": "issueCertificate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "revokeIssuer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_certId",
          "type": "uint256"
        }
      ],
      "name": "getCertificateById",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "organization",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "trusted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "exist",
                  "type": "bool"
                }
              ],
              "internalType": "struct CertificateStoreCore.Issuer",
              "name": "issuer",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "certificateHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            }
          ],
          "internalType": "struct CertificateStoreCore.Certificate",
          "name": "allCertificates",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwnedCertificatesId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ownedCertificates",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"CertificateStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"TrustedIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"UntrustedIssuer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_certHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pretendedOwner\",\"type\":\"address\"}],\"name\":\"authenticateHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authenticated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"authenticatedCertificateId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"internalType\":\"struct CertificateStoreCore.Issuer\",\"name\":\"issuer\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificateHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCertificateById\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"internalType\":\"struct CertificateStoreCore.Issuer\",\"name\":\"issuer\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificateHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"internalType\":\"struct CertificateStoreCore.Certificate\",\"name\":\"allCertificates\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnedCertificatesId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownedCertificates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTrustedIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_certHash\",\"type\":\"string\"}],\"name\":\"issueCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"revokeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addIssuer(address,string)\":{\"details\":\"Add a new trusted issuer\"},\"authenticateHash(string,address)\":{\"details\":\"Returns true and the certificate id if the given certificate hash and the pretended owner match\"},\"getCertificateById(uint256)\":{\"details\":\"Return certificate matching th given id;\"},\"getOwnedCertificatesId()\":{\"details\":\"Returns certificates owned by the caller\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isTrustedIssuer()\":{\"details\":\"Returns true if the caller is a trusted issuer\"},\"issueCertificate(address,string,string)\":{\"details\":\"Issue a new certificate from input data (only trusted issuer)\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeIssuer(address,string)\":{\"details\":\"Revoke an existing issuer\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol\":\"CertificateStore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol\":{\"keccak256\":\"0x2acfe8f3ff8265320f0a6e593b3b1f8c4fafa5a3feb41455465ddd5a0fec9aa7\",\"urls\":[\"bzz-raw://7ef896a96f5354c227b50d28b946a9ef37c38ba282584f6cfd0118f48cc99e5a\",\"dweb:/ipfs/QmVfZZ73bhiWAcc2cSCQAFqUf7TA4bvabQdWF7WokCWm1U\"]},\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol\":{\"keccak256\":\"0x129117bd175bb7ed598dd8af833156cb66b3255c61fa07e2be363da7a8bf14a4\",\"urls\":[\"bzz-raw://aee458f991554ee3a1a710fc127b68d56bf7827b03e7bf690c840cd57b442018\",\"dweb:/ipfs/QmU5mo1ZhRPJCSz4SXBraejcivqB9AknhBrLcmvQczkc5J\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\",\"urls\":[\"bzz-raw://cf4c00fc3c37cc5acf0c82ec6fd97bab67d72c2567fdc0ebf023d9c09b30a08e\",\"dweb:/ipfs/Qmb7TChG6DsEDX7LooJ4vmxot19f7VXX8S1zUGPeJTWbwZ\"]}},\"version\":1}",
  "bytecode": "0x6080604052600062000016620001ab60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000be620004e5565b62000114620000d2620001b360201b60201c565b6040518060400160405280600781526020017f4365727469665900000000000000000000000000000000000000000000000000815250620001dc60201b60201c565b9050620001a3816200012b620001b360201b60201c565b6040518060400160405280601481526020017f4f524947494e414c5f43455254494649434154450000000000000000000000008152506040518060400160405280601481526020017f4f524947494e414c5f43455254494649434154450000000000000000000000008152506200022b60201b60201c565b50506200070a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620001e6620004e5565b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815250905092915050565b60006200023762000527565b6040518060c001604052808781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020014281526020016001151581525090506000600180839080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906200031e9291906200057d565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550505060208201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816004019080519060200190620003c69291906200057d565b506060820151816005019080519060200190620003e59291906200057d565b506080820151816006015560a08201518160070160006101000a81548160ff021916908315150217905550505003905080600285604051620004289190620006a5565b908152602001604051809103902081905550600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508092505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b6040518060c001604052806200053c62000604565b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005c057805160ff1916838001178555620005f1565b82800160010185558215620005f1579182015b82811115620005f0578251825591602001919060010190620005d3565b5b50905062000600919062000646565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b6200066b91905b80821115620006675760008160009055506001016200064d565b5090565b90565b60006200067b82620006be565b620006878185620006c9565b935062000699818560208601620006d4565b80840191505092915050565b6000620006b382846200066e565b915081905092915050565b600081519050919050565b600081905092915050565b60005b83811015620006f4578082015181840152602081019050620006d7565b8381111562000704576000848401525b50505050565b6122b2806200071a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101815780638f32d59b1461019f5780638fc0859a146101bd5780639d735caf146101d9578063e98ac4d814610209578063f2fde38b14610225576100b4565b80632b43c5f1146100b95780633aceed30146100d557806364b3300314610106578063663b3e2214610124578063715018a6146101595780638d06245814610163575b600080fd5b6100d360048036036100ce91908101906119a2565b610241565b005b6100ef60048036036100ea9190810190611a75565b610477565b6040516100fd929190611f80565b60405180910390f35b61010e61056a565b60405161011b9190611f43565b60405180910390f35b61013e60048036036101399190810190611ac9565b6106ac565b6040516101509695949392919061202b565b60405180910390f35b61016161098a565b005b61016b610a90565b6040516101789190611f65565b60405180910390f35b610189610ae7565b6040516101969190611ef8565b60405180910390f35b6101a7610b10565b6040516101b49190611f65565b60405180910390f35b6101d760048036036101d291908101906119a2565b610b6e565b005b6101f360048036036101ee9190810190611ac9565b610db5565b6040516102009190612009565b60405180910390f35b610223600480360361021e91908101906119f6565b6110eb565b005b61023f600480360361023a9190810190611979565b6112f8565b005b610249610b10565b610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90611fe9565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff161561033d576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690831515021790555061043a565b61034561177e565b61034f838361134b565b905080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906103f49291906117c0565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550905050505b7f731003ff9638e352f896124100670675e1e4322e7dfc0fe1fb311969e6f94bf7828260405161046b929190611f13565b60405180910390a15050565b600080600060028560405161048c9190611ee1565b908152602001604051809103902054905060011515600182815481106104ae57fe5b906000526020600020906008020160070160009054906101000a900460ff16151514801561054557508373ffffffffffffffffffffffffffffffffffffffff16600182815481106104fb57fe5b906000526020600020906008020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610557576001819250925050610563565b60008080905092509250505b9250929050565b606080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040519080825280602002602001820160405280156105db5781602001602082028038833980820191505090505b509050600080905060008090505b600180549050811080156105fd5750825182105b156106a3573373ffffffffffffffffffffffffffffffffffffffff166001828154811061062657fe5b906000526020600020906008020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610696578083838151811061068157fe5b60200260200101818152505081806001019250505b80806001019150506105e9565b50819250505090565b600181815481106106b957fe5b9060005260206000209060080201600091509050806000016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581525050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108c95780601f1061089e576101008083540402835291602001916108c9565b820191906000526020600020905b8154815290600101906020018083116108ac57829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109675780601f1061093c57610100808354040283529160200191610967565b820191906000526020600020905b81548152906001019060200180831161094a57829003601f168201915b5050505050908060060154908060070160009054906101000a900460ff16905086565b610992610b10565b6109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890611fe9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b52611398565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b610b76610b10565b610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac90611fe9565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff1615610c6a576001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908315150217905550610d78565b610c7261177e565b610c7c838361134b565b9050600181604001901515908115158152505080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610d329291906117c0565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550905050505b7f71f25247d01355f495505e8ea75c6b650f7c2b9a0c1906032ea56f503645e35e8282604051610da9929190611f13565b60405180910390a15050565b610dbd611840565b60018281548110610dca57fe5b90600052602060002090600802016040518060c0016040529081600082016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ee25780601f10610eb757610100808354040283529160200191610ee2565b820191906000526020600020905b815481529060010190602001808311610ec557829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff16151515158152505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110145780601f10610fe957610100808354040283529160200191611014565b820191906000526020600020905b815481529060010190602001808311610ff757829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110b65780601f1061108b576101008083540402835291602001916110b6565b820191906000526020600020905b81548152906001019060200180831161109957829003601f168201915b50505050508152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509050919050565b6110f3610a90565b611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990611fa9565b60405180910390fd5b60006112b7600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112705780601f1061124557610100808354040283529160200191611270565b820191906000526020600020905b81548152906001019060200180831161125357829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff1615151515815250508585856113a0565b90507f33a43a5f40642b7962e152d8df96057d081da4482e7adef69ddf86e2dc9ae71181846040516112ea9291906120a1565b60405180910390a150505050565b611300610b10565b61133f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133690611fe9565b60405180910390fd5b61134881611650565b50565b61135361177e565b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160011515815250905092915050565b600033905090565b60006113aa611840565b6040518060c001604052808781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020014281526020016001151581525090506000600180839080600181540180825580915050906001820390600052602060002090600802016000909192909190915060008201518160000160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061148f9291906117c0565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550505060208201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160040190805190602001906115359291906117c0565b5060608201518160050190805190602001906115529291906117c0565b506080820151816006015560a08201518160070160006101000a81548160ff0219169083151502179055505050039050806002856040516115939190611ee1565b908152602001604051809103902081905550600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508092505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b790611fc9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061180157805160ff191683800117855561182f565b8280016001018555821561182f579182015b8281111561182e578251825591602001919060010190611813565b5b50905061183c9190611894565b5090565b6040518060c001604052806118536118b9565b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b6118b691905b808211156118b257600081600090555060010161189a565b5090565b90565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b60008135905061190a81612241565b92915050565b600082601f83011261192157600080fd5b813561193461192f826120fe565b6120d1565b9150808252602083016020830185838301111561195057600080fd5b61195b8382846121ee565b50505092915050565b60008135905061197381612258565b92915050565b60006020828403121561198b57600080fd5b6000611999848285016118fb565b91505092915050565b600080604083850312156119b557600080fd5b60006119c3858286016118fb565b925050602083013567ffffffffffffffff8111156119e057600080fd5b6119ec85828601611910565b9150509250929050565b600080600060608486031215611a0b57600080fd5b6000611a19868287016118fb565b935050602084013567ffffffffffffffff811115611a3657600080fd5b611a4286828701611910565b925050604084013567ffffffffffffffff811115611a5f57600080fd5b611a6b86828701611910565b9150509250925092565b60008060408385031215611a8857600080fd5b600083013567ffffffffffffffff811115611aa257600080fd5b611aae85828601611910565b9250506020611abf858286016118fb565b9150509250929050565b600060208284031215611adb57600080fd5b6000611ae984828501611964565b91505092915050565b6000611afe8383611ec3565b60208301905092915050565b611b13816121a6565b82525050565b611b22816121a6565b82525050565b6000611b338261213a565b611b3d8185612168565b9350611b488361212a565b8060005b83811015611b79578151611b608882611af2565b9750611b6b8361215b565b925050600181019050611b4c565b5085935050505092915050565b611b8f816121b8565b82525050565b611b9e816121b8565b82525050565b6000611baf82612150565b611bb9818561218a565b9350611bc98185602086016121fd565b611bd281612230565b840191505092915050565b6000611be882612150565b611bf2818561219b565b9350611c028185602086016121fd565b80840191505092915050565b6000611c1982612145565b611c238185612179565b9350611c338185602086016121fd565b611c3c81612230565b840191505092915050565b6000611c5282612145565b611c5c818561218a565b9350611c6c8185602086016121fd565b611c7581612230565b840191505092915050565b6000611c8d60168361218a565b91507f497373756572206973206e6f7420747275737465642e000000000000000000006000830152602082019050919050565b6000611ccd60268361218a565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d3360208361218a565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060c0830160008301518482036000860152611d838282611dfd565b9150506020830151611d986020860182611b0a565b5060408301518482036040860152611db08282611c0e565b91505060608301518482036060860152611dca8282611c0e565b9150506080830151611ddf6080860182611ec3565b5060a0830151611df260a0860182611b86565b508091505092915050565b6000608083016000830151611e156000860182611b0a565b5060208301518482036020860152611e2d8282611c0e565b9150506040830151611e426040860182611b86565b506060830151611e556060860182611b86565b508091505092915050565b6000608083016000830151611e786000860182611b0a565b5060208301518482036020860152611e908282611c0e565b9150506040830151611ea56040860182611b86565b506060830151611eb86060860182611b86565b508091505092915050565b611ecc816121e4565b82525050565b611edb816121e4565b82525050565b6000611eed8284611bdd565b915081905092915050565b6000602082019050611f0d6000830184611b19565b92915050565b6000604082019050611f286000830185611b19565b8181036020830152611f3a8184611ba4565b90509392505050565b60006020820190508181036000830152611f5d8184611b28565b905092915050565b6000602082019050611f7a6000830184611b95565b92915050565b6000604082019050611f956000830185611b95565b611fa26020830184611ed2565b9392505050565b60006020820190508181036000830152611fc281611c80565b9050919050565b60006020820190508181036000830152611fe281611cc0565b9050919050565b6000602082019050818103600083015261200281611d26565b9050919050565b600060208201905081810360008301526120238184611d66565b905092915050565b600060c08201905081810360008301526120458189611e60565b90506120546020830188611b19565b81810360408301526120668187611c47565b9050818103606083015261207a8186611c47565b90506120896080830185611ed2565b61209660a0830184611b95565b979650505050505050565b60006040820190506120b66000830185611ed2565b81810360208301526120c88184611ba4565b90509392505050565b6000604051905081810181811067ffffffffffffffff821117156120f457600080fd5b8060405250919050565b600067ffffffffffffffff82111561211557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006121b1826121c4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561221b578082015181840152602081019050612200565b8381111561222a576000848401525b50505050565b6000601f19601f8301169050919050565b61224a816121a6565b811461225557600080fd5b50565b612261816121e4565b811461226c57600080fd5b5056fea365627a7a72315820dc2b8836ca8aefa9f5fbabb3f594054c48b391f22d5b68932c8a12061964561e6c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "",
  "sourceMap": "105:835:0:-;;;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;1208:20:1;;:::i;:::-;1231:32;1244:7;:5;;;:7;;:::i;:::-;1231:32;;;;;;;;;;;;;;;;;:12;;;:32;;:::i;:::-;1208:55;;1273:82;1291:6;1299:7;:5;;;:7;;:::i;:::-;1273:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:17;;;:82;;:::i;:::-;;1177:185;105:835:0;;788:96:3;833:15;867:10;860:17;;788:96;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;2717:183:1:-;2808:23;;:::i;:::-;2850:43;;;;;;;;2857:7;2850:43;;;;;;2866:13;2850:43;;;;2881:5;2850:43;;;;;;2888:4;2850:43;;;;;2843:50;;2717:183;;;;:::o;2982:470::-;3113:18;3143:30;;:::i;:::-;3176:58;;;;;;;;3188:7;3176:58;;;;3197:6;3176:58;;;;;;3205:6;3176:58;;;;3213:9;3176:58;;;;3224:3;3176:58;;;;3229:4;3176:58;;;;;3143:91;;3244:7;3287:1;3254:12;3272:11;3254:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3254:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:34;3244:44;;3340:2;3298:28;3327:9;3298:39;;;;;;;;;;;;;;;;;;;;:44;;;;3353:16;:24;3370:6;3353:24;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;3389:22;:34;3412:10;3389:34;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;3443:2;3436:9;;;;2982:470;;;;;;:::o;105:835:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:360:-1:-;;135:39;168:5;135:39;;;186:89;268:6;263:3;186:89;;;179:96;;280:52;325:6;320:3;313:4;306:5;302:16;280:52;;;353:6;348:3;344:16;337:23;;115:250;;;;;;372:266;;518:95;609:3;600:6;518:95;;;511:102;;630:3;623:10;;499:139;;;;;645:122;;739:5;733:12;723:22;;704:63;;;;775:145;;911:3;896:18;;889:31;;;;;929:268;994:1;1001:101;1015:6;1012:1;1009:13;1001:101;;;1091:1;1086:3;1082:11;1076:18;1072:1;1067:3;1063:11;1056:39;1037:2;1034:1;1030:10;1025:15;;1001:101;;;1117:6;1114:1;1111:13;1108:2;;;1182:1;1173:6;1168:3;1164:16;1157:27;1108:2;978:219;;;;;105:835:0;;;;;;;",
  "deployedSourceMap": "105:835:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;105:835:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1888:378:1;;;;;;;;;;;;;;;;:::i;:::-;;3932:391;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;444:494:0;;;:::i;:::-;;;;;;;;;;;;;;;;699:33:1;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1684:137:4;;;:::i;:::-;;2345:115:1;;;:::i;:::-;;;;;;;;;;;;;;;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;1419:411:1;;;;;;;;;;;;;;;;:::i;:::-;;228:143:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3546:258:1;;;;;;;;;;;;;;;;:::i;:::-;;1970:107:4;;;;;;;;;;;;;;;;:::i;:::-;;1888:378:1;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1986:7:1;:16;1994:7;1986:16;;;;;;;;;;;;;;;:22;;;;;;;;;;;;1983:222;;;2051:5;2024:7;:16;2032:7;2024:16;;;;;;;;;;;;;;;:24;;;:32;;;;;;;;;;;;;;;;;;1983:222;;;2087:24;;:::i;:::-;2114:36;2127:7;2136:13;2114:12;:36::i;:::-;2087:63;;2184:10;2165:7;:16;2173:7;2165:16;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1983:222;;2220:39;2236:7;2245:13;2220:39;;;;;;;;;;;;;;;;1888:378;;:::o;3932:391::-;4029:18;4049:31;4092:11;4106:28;4135:9;4106:39;;;;;;;;;;;;;;;;;;;;;4092:53;;4189:4;4159:34;;:12;4172:6;4159:20;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:34;;;:83;;;;;4227:15;4197:45;;:12;4210:6;4197:20;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:45;;;4159:83;4156:134;;;4266:4;4272:6;4258:21;;;;;;;4156:134;4307:5;4314:1;4299:17;;;;;;;;3932:391;;;;;;:::o;444:494:0:-;499:31;542:32;588:16;:28;605:10;588:28;;;;;;;;;;;;;;;;577:40;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;577:40:0;;;;542:75;;627:12;642:1;627:16;;659:6;668:1;659:10;;654:242;675:12;:19;;;;671:1;:23;:62;;;;;708:18;:25;698:7;:35;671:62;654:242;;;783:10;758:35;;:12;771:1;758:15;;;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;:35;;;754:132;;;843:1;813:18;832:7;813:27;;;;;;;;;;;;;:31;;;;;862:9;;;;;;;754:132;735:3;;;;;;;654:242;;;;913:18;906:25;;;;444:494;:::oo;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;2345:115:1:-;2393:14;2426:7;:19;2434:10;2426:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;2419:34;;2345:115;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;1419:411:1:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1514:7:1;:16;1522:7;1514:16;;;;;;;;;;;;;;;:22;;;;;;;;;;;;1511:260;;;1579:4;1552:7;:16;1560:7;1552:16;;;;;;;;;;;;;;;:24;;;:31;;;;;;;;;;;;;;;;;;1511:260;;;1614:24;;:::i;:::-;1641:36;1654:7;1663:13;1641:12;:36::i;:::-;1614:63;;1712:4;1691:10;:18;;:25;;;;;;;;;;;1750:10;1731:7;:16;1739:7;1731:16;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1511:260;;1786:37;1800:7;1809:13;1786:37;;;;;;;;;;;;;;;;1419:411;;:::o;228:143:0:-;290:34;;:::io;3546:258:1:-;2600:17;:15;:17::i;:::-;2592:52;;;;;;;;;;;;;;;;;;;;;;3670:11;3684:65;3702:7;:19;3710:10;3702:19;;;;;;;;;;;;;;;3684:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3723:6;3731;3739:9;3684:17;:65::i;:::-;3670:79;;3764:33;3782:6;3790;3764:33;;;;;;;;;;;;;;;;2654:1;3546:258;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;2717:183:1:-;2808:23;;:::i;:::-;2850:43;;;;;;;;2857:7;2850:43;;;;;;2866:13;2850:43;;;;2881:5;2850:43;;;;;;2888:4;2850:43;;;;;2843:50;;2717:183;;;;:::o;788:96:3:-;833:15;867:10;860:17;;788:96;:::o;2982:470:1:-;3113:18;3143:30;;:::i;:::-;3176:58;;;;;;;;3188:7;3176:58;;;;3197:6;3176:58;;;;;;3205:6;3176:58;;;;3213:9;3176:58;;;;3224:3;3176:58;;;;3229:4;3176:58;;;;;3143:91;;3244:7;3287:1;3254:12;3272:11;3254:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3254:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:34;3244:44;;3340:2;3298:28;3327:9;3298:39;;;;;;;;;;;;;;;;;;;;:44;;;;3353:16;:24;3370:6;3353:24;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;3389:22;:34;3412:10;3389:34;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;3443:2;3436:9;;;;2982:470;;;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;105:835:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;143:442;;245:3;238:4;230:6;226:17;222:27;212:2;;263:1;260;253:12;212:2;300:6;287:20;322:65;337:49;379:6;337:49;;;322:65;;;313:74;;407:6;400:5;393:21;443:4;435:6;431:17;476:4;469:5;465:16;511:3;502:6;497:3;493:16;490:25;487:2;;;528:1;525;518:12;487:2;538:41;572:6;567:3;562;538:41;;;205:380;;;;;;;;593:130;;673:6;660:20;651:29;;685:33;712:5;685:33;;;645:78;;;;;730:241;;834:2;822:9;813:7;809:23;805:32;802:2;;;850:1;847;840:12;802:2;885:1;902:53;947:7;938:6;927:9;923:22;902:53;;;892:63;;864:97;796:175;;;;;978:472;;;1109:2;1097:9;1088:7;1084:23;1080:32;1077:2;;;1125:1;1122;1115:12;1077:2;1160:1;1177:53;1222:7;1213:6;1202:9;1198:22;1177:53;;;1167:63;;1139:97;1295:2;1284:9;1280:18;1267:32;1319:18;1311:6;1308:30;1305:2;;;1351:1;1348;1341:12;1305:2;1371:63;1426:7;1417:6;1406:9;1402:22;1371:63;;;1361:73;;1246:194;1071:379;;;;;;1457:703;;;;1615:2;1603:9;1594:7;1590:23;1586:32;1583:2;;;1631:1;1628;1621:12;1583:2;1666:1;1683:53;1728:7;1719:6;1708:9;1704:22;1683:53;;;1673:63;;1645:97;1801:2;1790:9;1786:18;1773:32;1825:18;1817:6;1814:30;1811:2;;;1857:1;1854;1847:12;1811:2;1877:63;1932:7;1923:6;1912:9;1908:22;1877:63;;;1867:73;;1752:194;2005:2;1994:9;1990:18;1977:32;2029:18;2021:6;2018:30;2015:2;;;2061:1;2058;2051:12;2015:2;2081:63;2136:7;2127:6;2116:9;2112:22;2081:63;;;2071:73;;1956:194;1577:583;;;;;;2167:472;;;2298:2;2286:9;2277:7;2273:23;2269:32;2266:2;;;2314:1;2311;2304:12;2266:2;2377:1;2366:9;2362:17;2349:31;2400:18;2392:6;2389:30;2386:2;;;2432:1;2429;2422:12;2386:2;2452:63;2507:7;2498:6;2487:9;2483:22;2452:63;;;2442:73;;2328:193;2552:2;2570:53;2615:7;2606:6;2595:9;2591:22;2570:53;;;2560:63;;2531:98;2260:379;;;;;;2646:241;;2750:2;2738:9;2729:7;2725:23;2721:32;2718:2;;;2766:1;2763;2756:12;2718:2;2801:1;2818:53;2863:7;2854:6;2843:9;2839:22;2818:53;;;2808:63;;2780:97;2712:175;;;;;2895:173;;2982:46;3024:3;3016:6;2982:46;;;3057:4;3052:3;3048:14;3034:28;;2975:93;;;;;3076:103;3149:24;3167:5;3149:24;;;3144:3;3137:37;3131:48;;;3186:113;3269:24;3287:5;3269:24;;;3264:3;3257:37;3251:48;;;3337:690;;3482:54;3530:5;3482:54;;;3549:86;3628:6;3623:3;3549:86;;;3542:93;;3656:56;3706:5;3656:56;;;3732:7;3760:1;3745:260;3770:6;3767:1;3764:13;3745:260;;;3837:6;3831:13;3858:63;3917:3;3902:13;3858:63;;;3851:70;;3938:60;3991:6;3938:60;;;3928:70;;3802:203;3792:1;3789;3785:9;3780:14;;3745:260;;;3749:14;4018:3;4011:10;;3461:566;;;;;;;;4035:94;4102:21;4117:5;4102:21;;;4097:3;4090:34;4084:45;;;4136:104;4213:21;4228:5;4213:21;;;4208:3;4201:34;4195:45;;;4247:347;;4359:39;4392:5;4359:39;;;4410:71;4474:6;4469:3;4410:71;;;4403:78;;4486:52;4531:6;4526:3;4519:4;4512:5;4508:16;4486:52;;;4559:29;4581:6;4559:29;;;4554:3;4550:39;4543:46;;4339:255;;;;;;4601:360;;4731:39;4764:5;4731:39;;;4782:89;4864:6;4859:3;4782:89;;;4775:96;;4876:52;4921:6;4916:3;4909:4;4902:5;4898:16;4876:52;;;4949:6;4944:3;4940:16;4933:23;;4711:250;;;;;;4968:319;;5066:35;5095:5;5066:35;;;5113:61;5167:6;5162:3;5113:61;;;5106:68;;5179:52;5224:6;5219:3;5212:4;5205:5;5201:16;5179:52;;;5252:29;5274:6;5252:29;;;5247:3;5243:39;5236:46;;5046:241;;;;;;5294:339;;5402:35;5431:5;5402:35;;;5449:71;5513:6;5508:3;5449:71;;;5442:78;;5525:52;5570:6;5565:3;5558:4;5551:5;5547:16;5525:52;;;5598:29;5620:6;5598:29;;;5593:3;5589:39;5582:46;;5382:251;;;;;;5641:322;;5801:67;5865:2;5860:3;5801:67;;;5794:74;;5901:24;5897:1;5892:3;5888:11;5881:45;5954:2;5949:3;5945:12;5938:19;;5787:176;;;;5972:375;;6132:67;6196:2;6191:3;6132:67;;;6125:74;;6232:34;6228:1;6223:3;6219:11;6212:55;6301:8;6296:2;6291:3;6287:12;6280:30;6338:2;6333:3;6329:12;6322:19;;6118:229;;;;6356:332;;6516:67;6580:2;6575:3;6516:67;;;6509:74;;6616:34;6612:1;6607:3;6603:11;6596:55;6679:2;6674:3;6670:12;6663:19;;6502:186;;;;6785:1373;;6942:4;6937:3;6933:14;7027:4;7020:5;7016:16;7010:23;7079:3;7073:4;7069:14;7062:4;7057:3;7053:14;7046:38;7099:95;7189:4;7175:12;7099:95;;;7091:103;;6962:244;7280:4;7273:5;7269:16;7263:23;7292:63;7349:4;7344:3;7340:14;7326:12;7292:63;;;7216:145;7435:4;7428:5;7424:16;7418:23;7487:3;7481:4;7477:14;7470:4;7465:3;7461:14;7454:38;7507:69;7571:4;7557:12;7507:69;;;7499:77;;7371:217;7672:4;7665:5;7661:16;7655:23;7724:3;7718:4;7714:14;7707:4;7702:3;7698:14;7691:38;7744:69;7808:4;7794:12;7744:69;;;7736:77;;7598:227;7902:4;7895:5;7891:16;7885:23;7914:63;7971:4;7966:3;7962:14;7948:12;7914:63;;;7835:148;8057:4;8050:5;8046:16;8040:23;8069:57;8120:4;8115:3;8111:14;8097:12;8069:57;;;7993:139;8149:4;8142:11;;6915:1243;;;;;;8244:859;;8377:4;8372:3;8368:14;8462:4;8455:5;8451:16;8445:23;8474:63;8531:4;8526:3;8522:14;8508:12;8474:63;;;8397:146;8624:4;8617:5;8613:16;8607:23;8676:3;8670:4;8666:14;8659:4;8654:3;8650:14;8643:38;8696:69;8760:4;8746:12;8696:69;;;8688:77;;8553:224;8853:4;8846:5;8842:16;8836:23;8865:57;8916:4;8911:3;8907:14;8893:12;8865:57;;;8787:141;9002:4;8995:5;8991:16;8985:23;9014:57;9065:4;9060:3;9056:14;9042:12;9014:57;;;8938:139;9094:4;9087:11;;8350:753;;;;;;9189:869;;9332:4;9327:3;9323:14;9417:4;9410:5;9406:16;9400:23;9429:63;9486:4;9481:3;9477:14;9463:12;9429:63;;;9352:146;9579:4;9572:5;9568:16;9562:23;9631:3;9625:4;9621:14;9614:4;9609:3;9605:14;9598:38;9651:69;9715:4;9701:12;9651:69;;;9643:77;;9508:224;9808:4;9801:5;9797:16;9791:23;9820:57;9871:4;9866:3;9862:14;9848:12;9820:57;;;9742:141;9957:4;9950:5;9946:16;9940:23;9969:57;10020:4;10015:3;10011:14;9997:12;9969:57;;;9893:139;10049:4;10042:11;;9305:753;;;;;;10065:103;10138:24;10156:5;10138:24;;;10133:3;10126:37;10120:48;;;10175:113;10258:24;10276:5;10258:24;;;10253:3;10246:37;10240:48;;;10295:266;;10441:95;10532:3;10523:6;10441:95;;;10434:102;;10553:3;10546:10;;10422:139;;;;;10568:213;;10686:2;10675:9;10671:18;10663:26;;10700:71;10768:1;10757:9;10753:17;10744:6;10700:71;;;10657:124;;;;;10788:412;;10954:2;10943:9;10939:18;10931:26;;10968:71;11036:1;11025:9;11021:17;11012:6;10968:71;;;11087:9;11081:4;11077:20;11072:2;11061:9;11057:18;11050:48;11112:78;11185:4;11176:6;11112:78;;;11104:86;;10925:275;;;;;;11207:361;;11375:2;11364:9;11360:18;11352:26;;11425:9;11419:4;11415:20;11411:1;11400:9;11396:17;11389:47;11450:108;11553:4;11544:6;11450:108;;;11442:116;;11346:222;;;;;11575:201;;11687:2;11676:9;11672:18;11664:26;;11701:65;11763:1;11752:9;11748:17;11739:6;11701:65;;;11658:118;;;;;11783:312;;11923:2;11912:9;11908:18;11900:26;;11937:65;11999:1;11988:9;11984:17;11975:6;11937:65;;;12013:72;12081:2;12070:9;12066:18;12057:6;12013:72;;;11894:201;;;;;;12102:407;;12293:2;12282:9;12278:18;12270:26;;12343:9;12337:4;12333:20;12329:1;12318:9;12314:17;12307:47;12368:131;12494:4;12368:131;;;12360:139;;12264:245;;;;12516:407;;12707:2;12696:9;12692:18;12684:26;;12757:9;12751:4;12747:20;12743:1;12732:9;12728:17;12721:47;12782:131;12908:4;12782:131;;;12774:139;;12678:245;;;;12930:407;;13121:2;13110:9;13106:18;13098:26;;13171:9;13165:4;13161:20;13157:1;13146:9;13142:17;13135:47;13196:131;13322:4;13196:131;;;13188:139;;13092:245;;;;13344:373;;13518:2;13507:9;13503:18;13495:26;;13568:9;13562:4;13558:20;13554:1;13543:9;13539:17;13532:47;13593:114;13702:4;13693:6;13593:114;;;13585:122;;13489:228;;;;;13724:1051;;14050:3;14039:9;14035:19;14027:27;;14101:9;14095:4;14091:20;14087:1;14076:9;14072:17;14065:47;14126:100;14221:4;14212:6;14126:100;;;14118:108;;14237:72;14305:2;14294:9;14290:18;14281:6;14237:72;;;14357:9;14351:4;14347:20;14342:2;14331:9;14327:18;14320:48;14382:74;14451:4;14442:6;14382:74;;;14374:82;;14504:9;14498:4;14494:20;14489:2;14478:9;14474:18;14467:48;14529:74;14598:4;14589:6;14529:74;;;14521:82;;14614:73;14682:3;14671:9;14667:19;14658:6;14614:73;;;14698:67;14760:3;14749:9;14745:19;14736:6;14698:67;;;14021:754;;;;;;;;;;14782:412;;14948:2;14937:9;14933:18;14925:26;;14962:71;15030:1;15019:9;15015:17;15006:6;14962:71;;;15081:9;15075:4;15071:20;15066:2;15055:9;15051:18;15044:48;15106:78;15179:4;15170:6;15106:78;;;15098:86;;14919:275;;;;;;15201:256;;15263:2;15257:9;15247:19;;15301:4;15293:6;15289:17;15400:6;15388:10;15385:22;15364:18;15352:10;15349:34;15346:62;15343:2;;;15421:1;15418;15411:12;15343:2;15441:10;15437:2;15430:22;15241:216;;;;;15464:322;;15608:18;15600:6;15597:30;15594:2;;;15640:1;15637;15630:12;15594:2;15707:4;15703:9;15696:4;15688:6;15684:17;15680:33;15672:41;;15771:4;15765;15761:15;15753:23;;15531:255;;;;15793:151;;15879:3;15871:11;;15917:4;15912:3;15908:14;15900:22;;15865:79;;;;15951:137;;16060:5;16054:12;16044:22;;16025:63;;;;16095:118;;16185:5;16179:12;16169:22;;16150:63;;;;16220:122;;16314:5;16308:12;16298:22;;16279:63;;;;16349:108;;16447:4;16442:3;16438:14;16430:22;;16424:33;;;;16465:178;;16595:6;16590:3;16583:19;16632:4;16627:3;16623:14;16608:29;;16576:67;;;;;16652:153;;16757:6;16752:3;16745:19;16794:4;16789:3;16785:14;16770:29;;16738:67;;;;;16814:163;;16929:6;16924:3;16917:19;16966:4;16961:3;16957:14;16942:29;;16910:67;;;;;16986:145;;17122:3;17107:18;;17100:31;;;;;17139:91;;17201:24;17219:5;17201:24;;;17190:35;;17184:46;;;;17237:85;;17310:5;17303:13;17296:21;17285:32;;17279:43;;;;17329:121;;17402:42;17395:5;17391:54;17380:65;;17374:76;;;;17457:72;;17519:5;17508:16;;17502:27;;;;17537:145;17618:6;17613:3;17608;17595:30;17674:1;17665:6;17660:3;17656:16;17649:27;17588:94;;;;17691:268;17756:1;17763:101;17777:6;17774:1;17771:13;17763:101;;;17853:1;17848:3;17844:11;17838:18;17834:1;17829:3;17825:11;17818:39;17799:2;17796:1;17792:10;17787:15;;17763:101;;;17879:6;17876:1;17873:13;17870:2;;;17944:1;17935:6;17930:3;17926:16;17919:27;17870:2;17740:219;;;;;17967:97;;18055:2;18051:7;18046:2;18039:5;18035:14;18031:28;18021:38;;18015:49;;;;18072:117;18141:24;18159:5;18141:24;;;18134:5;18131:35;18121:2;;18180:1;18177;18170:12;18121:2;18115:74;;18196:117;18265:24;18283:5;18265:24;;;18258:5;18255:35;18245:2;;18304:1;18301;18294:12;18245:2;18239:74;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./CertificateStoreCore.sol\";\n\ncontract CertificateStore is CertificateStoreCore {\n    /**\n    * @dev Return certificate matching th given id;\n    */\n    function getCertificateById(uint _certId) public view returns(Certificate memory allCertificates) {\n        return certificates[_certId];\n    }\n\n    /**\n    * @dev Returns certificates owned by the caller\n    */\n    function getOwnedCertificatesId() public view returns (uint[] memory ownedCertificates) {\n        uint[] memory _ownedCertificates = new uint[](certificateCount[msg.sender]);\n        uint current = 0;\n\n        for (uint i = 0; i < certificates.length && current < _ownedCertificates.length; i++) {\n            if (certificates[i].owner == msg.sender) {\n                _ownedCertificates[current] = i;\n                current++;\n            }\n        }\n\n        return _ownedCertificates;\n    }\n}\n",
  "sourcePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
  "ast": {
    "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
    "exportedSymbols": {
      "CertificateStore": [
        80
      ]
    },
    "id": 81,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:33:0"
      },
      {
        "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol",
        "file": "./CertificateStoreCore.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 81,
        "sourceUnit": 419,
        "src": "67:36:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "CertificateStoreCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 418,
              "src": "134:20:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateStoreCore_$418",
                "typeString": "contract CertificateStoreCore"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "134:20:0"
          }
        ],
        "contractDependencies": [
          418,
          482,
          600
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 80,
        "linearizedBaseContracts": [
          80,
          418,
          600,
          482
        ],
        "name": "CertificateStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "326:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 12,
                      "name": "certificates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 129,
                      "src": "343:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                        "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                      }
                    },
                    "id": 14,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 13,
                      "name": "_certId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "356:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "343:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$126_storage",
                      "typeString": "struct CertificateStoreCore.Certificate storage ref"
                    }
                  },
                  "functionReturnParameters": 11,
                  "id": 15,
                  "nodeType": "Return",
                  "src": "336:28:0"
                }
              ]
            },
            "documentation": "@dev Return certificate matching th given id;",
            "id": 17,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCertificateById",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "_certId",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "256:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "256:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "255:14:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "allCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "290:34:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Certificate_$126_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Certificate"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 9,
                    "name": "Certificate",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 126,
                    "src": "290:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$126_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Certificate"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "289:36:0"
            },
            "scope": 80,
            "src": "228:143:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "532:406:0",
              "statements": [
                {
                  "assignments": [
                    26
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26,
                      "name": "_ownedCertificates",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "542:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 24,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "542:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 25,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 35,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 30,
                          "name": "certificateCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 141,
                          "src": "588:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 33,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 31,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "605:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 32,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "605:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "588:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "577:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                        "typeString": "function (uint256) pure returns (uint256[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 27,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "581:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "581:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "577:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "542:75:0"
                },
                {
                  "assignments": [
                    37
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 37,
                      "name": "current",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "627:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "627:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 39,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "642:1:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "627:16:0"
                },
                {
                  "body": {
                    "id": 74,
                    "nodeType": "Block",
                    "src": "740:156:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 62,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 56,
                                "name": "certificates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 129,
                                "src": "758:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                                  "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                                }
                              },
                              "id": 58,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 57,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "771:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "758:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Certificate_$126_storage",
                                "typeString": "struct CertificateStoreCore.Certificate storage ref"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 117,
                            "src": "758:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 615,
                              "src": "783:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "783:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "758:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 73,
                        "nodeType": "IfStatement",
                        "src": "754:132:0",
                        "trueBody": {
                          "id": 72,
                          "nodeType": "Block",
                          "src": "795:91:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 67,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 63,
                                    "name": "_ownedCertificates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "813:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 65,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 64,
                                    "name": "current",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 37,
                                    "src": "832:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "813:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 66,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 41,
                                  "src": "843:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "813:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 68,
                              "nodeType": "ExpressionStatement",
                              "src": "813:31:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 70,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "862:9:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 69,
                                  "name": "current",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 37,
                                  "src": "862:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 71,
                              "nodeType": "ExpressionStatement",
                              "src": "862:9:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 52,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 47,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "671:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 45,
                          "name": "certificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 129,
                          "src": "675:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                            "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "675:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "671:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 51,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "current",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "698:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "_ownedCertificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "708:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 50,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "698:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "671:62:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 75,
                  "initializationExpression": {
                    "assignments": [
                      41
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 41,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "659:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 43,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "668:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "659:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "735:3:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "735:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 55,
                    "nodeType": "ExpressionStatement",
                    "src": "735:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "654:242:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "name": "_ownedCertificates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26,
                    "src": "913:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "functionReturnParameters": 22,
                  "id": 77,
                  "nodeType": "Return",
                  "src": "906:25:0"
                }
              ]
            },
            "documentation": "@dev Returns certificates owned by the caller",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOwnedCertificatesId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "475:2:0"
            },
            "returnParameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "ownedCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "499:31:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "499:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 20,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "499:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "498:33:0"
            },
            "scope": 80,
            "src": "444:494:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 81,
        "src": "105:835:0"
      }
    ],
    "src": "0:941:0"
  },
  "legacyAST": {
    "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
    "exportedSymbols": {
      "CertificateStore": [
        80
      ]
    },
    "id": 81,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:33:0"
      },
      {
        "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol",
        "file": "./CertificateStoreCore.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 81,
        "sourceUnit": 419,
        "src": "67:36:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "CertificateStoreCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 418,
              "src": "134:20:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateStoreCore_$418",
                "typeString": "contract CertificateStoreCore"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "134:20:0"
          }
        ],
        "contractDependencies": [
          418,
          482,
          600
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 80,
        "linearizedBaseContracts": [
          80,
          418,
          600,
          482
        ],
        "name": "CertificateStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "326:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 12,
                      "name": "certificates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 129,
                      "src": "343:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                        "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                      }
                    },
                    "id": 14,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 13,
                      "name": "_certId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "356:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "343:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$126_storage",
                      "typeString": "struct CertificateStoreCore.Certificate storage ref"
                    }
                  },
                  "functionReturnParameters": 11,
                  "id": 15,
                  "nodeType": "Return",
                  "src": "336:28:0"
                }
              ]
            },
            "documentation": "@dev Return certificate matching th given id;",
            "id": 17,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCertificateById",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "_certId",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "256:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "256:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "255:14:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "allCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "290:34:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Certificate_$126_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Certificate"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 9,
                    "name": "Certificate",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 126,
                    "src": "290:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$126_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Certificate"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "289:36:0"
            },
            "scope": 80,
            "src": "228:143:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "532:406:0",
              "statements": [
                {
                  "assignments": [
                    26
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26,
                      "name": "_ownedCertificates",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "542:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 24,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "542:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 25,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 35,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 30,
                          "name": "certificateCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 141,
                          "src": "588:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 33,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 31,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "605:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 32,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "605:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "588:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "577:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                        "typeString": "function (uint256) pure returns (uint256[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 27,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "581:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "581:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "577:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "542:75:0"
                },
                {
                  "assignments": [
                    37
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 37,
                      "name": "current",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "627:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "627:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 39,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "642:1:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "627:16:0"
                },
                {
                  "body": {
                    "id": 74,
                    "nodeType": "Block",
                    "src": "740:156:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 62,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 56,
                                "name": "certificates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 129,
                                "src": "758:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                                  "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                                }
                              },
                              "id": 58,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 57,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "771:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "758:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Certificate_$126_storage",
                                "typeString": "struct CertificateStoreCore.Certificate storage ref"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 117,
                            "src": "758:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 615,
                              "src": "783:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "783:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "758:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 73,
                        "nodeType": "IfStatement",
                        "src": "754:132:0",
                        "trueBody": {
                          "id": 72,
                          "nodeType": "Block",
                          "src": "795:91:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 67,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 63,
                                    "name": "_ownedCertificates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "813:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 65,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 64,
                                    "name": "current",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 37,
                                    "src": "832:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "813:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 66,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 41,
                                  "src": "843:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "813:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 68,
                              "nodeType": "ExpressionStatement",
                              "src": "813:31:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 70,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "862:9:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 69,
                                  "name": "current",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 37,
                                  "src": "862:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 71,
                              "nodeType": "ExpressionStatement",
                              "src": "862:9:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 52,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 47,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "671:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 45,
                          "name": "certificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 129,
                          "src": "675:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Certificate_$126_storage_$dyn_storage",
                            "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "675:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "671:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 51,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "current",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "698:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "_ownedCertificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "708:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 50,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "698:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "671:62:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 75,
                  "initializationExpression": {
                    "assignments": [
                      41
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 41,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "659:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 43,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "668:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "659:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "735:3:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "735:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 55,
                    "nodeType": "ExpressionStatement",
                    "src": "735:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "654:242:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "name": "_ownedCertificates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26,
                    "src": "913:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "functionReturnParameters": 22,
                  "id": 77,
                  "nodeType": "Return",
                  "src": "906:25:0"
                }
              ]
            },
            "documentation": "@dev Returns certificates owned by the caller",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOwnedCertificatesId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "475:2:0"
            },
            "returnParameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "ownedCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "499:31:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "499:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 20,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "499:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "498:33:0"
            },
            "scope": 80,
            "src": "444:494:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 81,
        "src": "105:835:0"
      }
    ],
    "src": "0:941:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x33a43a5f40642b7962e152d8df96057d081da4482e7adef69ddf86e2dc9ae711": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_title",
              "type": "string"
            }
          ],
          "name": "CertificateStored",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x71f25247d01355f495505e8ea75c6b650f7c2b9a0c1906032ea56f503645e35e": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_organization",
              "type": "string"
            }
          ],
          "name": "TrustedIssuer",
          "type": "event"
        },
        "0x731003ff9638e352f896124100670675e1e4322e7dfc0fe1fb311969e6f94bf7": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_organization",
              "type": "string"
            }
          ],
          "name": "UntrustedIssuer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x9f9E7E13d0100be58790E1DAf671A8e5aB354516",
      "transactionHash": "0x84ce46df8e65753ae8c43e72b9930b0b756c4b7d3eb70e63f2395c642e9cc625"
    }
  },
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-04-12T09:55:29.761Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "addIssuer(address,string)": {
        "details": "Add a new trusted issuer"
      },
      "authenticateHash(string,address)": {
        "details": "Returns true and the certificate id if the given certificate hash and the pretended owner match"
      },
      "getCertificateById(uint256)": {
        "details": "Return certificate matching th given id;"
      },
      "getOwnedCertificatesId()": {
        "details": "Returns certificates owned by the caller"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isTrustedIssuer()": {
        "details": "Returns true if the caller is a trusted issuer"
      },
      "issueCertificate(address,string,string)": {
        "details": "Issue a new certificate from input data (only trusted issuer)"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeIssuer(address,string)": {
        "details": "Revoke an existing issuer"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}