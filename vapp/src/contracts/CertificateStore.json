{
  "contractName": "CertificateStore",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "name": "CertificateStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "TrustedIssuer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "UntrustedIssuer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "addIssuer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "_certHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_pretendedOwner",
          "type": "address"
        }
      ],
      "name": "authenticateHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "authenticated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "authenticatedCertificateId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "certificates",
      "outputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "certificateHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "issuedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isTrustedIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_certHash",
          "type": "string"
        }
      ],
      "name": "issueCertificate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_organization",
          "type": "string"
        }
      ],
      "name": "revokeIssuer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_certId",
          "type": "uint256"
        }
      ],
      "name": "getCertificateById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "certificateHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            }
          ],
          "internalType": "struct CertificateStoreCore.Certificate",
          "name": "allCertificates",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwnedCertificatesId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ownedCertificates",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getIssuers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "organization",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "trusted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            }
          ],
          "internalType": "struct CertificateStoreCore.Issuer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"CertificateStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"TrustedIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"UntrustedIssuer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_certHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pretendedOwner\",\"type\":\"address\"}],\"name\":\"authenticateHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authenticated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"authenticatedCertificateId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificateHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCertificateById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificateHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"internalType\":\"struct CertificateStoreCore.Certificate\",\"name\":\"allCertificates\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIssuers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"internalType\":\"struct CertificateStoreCore.Issuer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnedCertificatesId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownedCertificates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTrustedIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_certHash\",\"type\":\"string\"}],\"name\":\"issueCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_organization\",\"type\":\"string\"}],\"name\":\"revokeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addIssuer(address,string)\":{\"details\":\"Add a new trusted issuer\"},\"authenticateHash(string,address)\":{\"details\":\"Returns true and the certificate id if the given certificate hash and the pretended owner match\"},\"getCertificateById(uint256)\":{\"details\":\"Return certificate matching th given id;\"},\"getIssuers()\":{\"details\":\"Returns all issuers\"},\"getOwnedCertificatesId()\":{\"details\":\"Returns certificates owned by the caller\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isTrustedIssuer()\":{\"details\":\"Returns true if the caller is a trusted issuer\"},\"issueCertificate(address,string,string)\":{\"details\":\"Issue a new certificate from input data (only trusted issuer)\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeIssuer(address,string)\":{\"details\":\"Revoke an existing issuer\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol\":\"CertificateStore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol\":{\"keccak256\":\"0x895c13a75efc0f11a7f4740932c4f754b719e1780750ec6e155c0dd4f434a4ae\",\"urls\":[\"bzz-raw://c36902a2e30811b877870cf2472ef0a94e3dbf5efd07ef98d22a0e5a39b23c20\",\"dweb:/ipfs/QmdJyKmmsADgcCgiGQxN74S37F5LtHgs8cP1w3amzPmAmi\"]},\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol\":{\"keccak256\":\"0xf2d5951cec6f7a9ca16f14d982ef768bc9243ceeefe56ddb601ba70b039e667e\",\"urls\":[\"bzz-raw://04fff4b3f9a51560f0d7c74cc42953e6ce6d374b3be65f9f898a18259d7e0e39\",\"dweb:/ipfs/QmfUCdwgTyPrMHavDYL2ETWGqMGvPh1UsGb5GgeQ7sa5De\"]},\"/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/StringUtils.sol\":{\"keccak256\":\"0x2ec0329da7d303e8461471eb073d0808ca521ba405dabd258673eab531ac66fa\",\"urls\":[\"bzz-raw://851b26591ad67ac8f9faa923008d5514b6bc394eb00b874e82463ab8fec6cdde\",\"dweb:/ipfs/QmXtWVory6FDw74YerSHPiZez95YQ4eNGvhyqYcD6afmKF\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\",\"urls\":[\"bzz-raw://cf4c00fc3c37cc5acf0c82ec6fd97bab67d72c2567fdc0ebf023d9c09b30a08e\",\"dweb:/ipfs/Qmb7TChG6DsEDX7LooJ4vmxot19f7VXX8S1zUGPeJTWbwZ\"]}},\"version\":1}",
  "bytecode": "0x60806040526000620000166200023560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000be6200064b565b62000114620000d26200023d60201b60201c565b6040518060400160405280600781526020017f43657274696659000000000000000000000000000000000000000000000000008152506200026660201b60201c565b905060016002600460006200012e6200023d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106200017457fe5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055506200022d8160000151620001b56200023d60201b60201c565b6040518060400160405280601481526020017f4f524947494e414c5f43455254494649434154450000000000000000000000008152506040518060400160405280601481526020017f4f524947494e414c5f4345525449464943415445000000000000000000000000815250620003e560201b60201c565b50506200083c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620002706200064b565b6200027a6200064b565b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600015158152602001600115158152509050600060016002839080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190620003509291906200068d565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550505003905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819250505092915050565b6000620003f162000714565b6040518060c001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020014281526020016001151581525090506000600180839080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906200052c9291906200068d565b5060608201518160030190805190602001906200054b9291906200068d565b506080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050039050806003856040516200058e9190620007d7565b908152602001604051809103902081905550600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508092505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006d057805160ff191683800117855562000701565b8280016001018555821562000701579182015b8281111562000700578251825591602001919060010190620006e3565b5b50905062000710919062000778565b5090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b6200079d91905b80821115620007995760008160009055506001016200077f565b5090565b90565b6000620007ad82620007f0565b620007b98185620007fb565b9350620007cb81856020860162000806565b80840191505092915050565b6000620007e58284620007a0565b915081905092915050565b600081519050919050565b600081905092915050565b60005b838110156200082657808201518184015260208101905062000809565b8381111562000836576000848401525b50505050565b61254f806200084c6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c5780639d735caf116100665780639d735caf146101f4578063a594da9514610224578063e98ac4d814610242578063f2fde38b1461025e576100cf565b80638da5cb5b1461019c5780638f32d59b146101ba5780638fc0859a146101d8576100cf565b80632b43c5f1146100d45780633aceed30146100f057806364b3300314610121578063663b3e221461013f578063715018a6146101745780638d0624581461017e575b600080fd5b6100ee60048036036100e99190810190611ad2565b61027a565b005b61010a60048036036101059190810190611bce565b6103f5565b6040516101189291906121fb565b60405180910390f35b61012961079d565b60405161013691906121be565b60405180910390f35b61015960048036036101549190810190611c22565b6108df565b60405161016b969594939291906120fd565b60405180910390f35b61017c610aa5565b005b610186610bab565b60405161019391906121e0565b60405180910390f35b6101a4610c1d565b6040516101b191906120e2565b60405180910390f35b6101c2610c46565b6040516101cf91906121e0565b60405180910390f35b6101f260048036036101ed9190810190611ad2565b610ca4565b005b61020e60048036036102099190810190611c22565b610e3a565b60405161021b91906122bb565b60405180910390f35b61022c611084565b604051610239919061219c565b60405180910390f35b61025c60048036036102579190810190611b26565b611258565b005b61027860048036036102739190810190611aa9565b61136b565b005b610282610c46565b6102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b89061229b565b60405180910390fd5b6002600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061030d57fe5b906000526020600020906003020160020160019054906101000a900460ff16156103ac5760006002600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061037f57fe5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055506103b8565b6103b682826113be565b505b7f731003ff9638e352f896124100670675e1e4322e7dfc0fe1fb311969e6f94bf782826040516103e992919061216c565b60405180910390a15050565b600080600060038560405161040a91906120cb565b90815260200160405180910390205490506104236118cb565b6001828154811061043057fe5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058e5780601f106105635761010080835404028352916020019161058e565b820191906000526020600020905b81548152906001019060200180831161057157829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600115158160a001511515148015610701575073__StringUtils___________________________6346bdca9a8260600151886040518363ffffffff1660e01b81526004016106b0929190612224565b60206040518083038186803b1580156106c857600080fd5b505af41580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107009190810190611ba5565b5b801561077657508473ffffffffffffffffffffffffffffffffffffffff166001838154811061072c57fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561078957600182935093505050610796565b6000808090509350935050505b9250929050565b606080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405190808252806020026020018201604052801561080e5781602001602082028038833980820191505090505b509050600080905060008090505b600180549050811080156108305750825182105b156108d6573373ffffffffffffffffffffffffffffffffffffffff166001828154811061085957fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108c957808383815181106108b457fe5b60200260200101818152505081806001019250505b808060010191505061081c565b50819250505090565b600181815481106108ec57fe5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff16905086565b610aad610c46565b610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae39061229b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610bf957fe5b906000526020600020906003020160020160009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c88611537565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b610cac610c46565b610ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce29061229b565b60405180910390fd5b6002600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610d3757fe5b906000526020600020906003020160020160019054906101000a900460ff1615610dd65760016002600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610da957fe5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610dfd565b610dde61192f565b610de883836113be565b90506001816040019015159081151581525050505b7f71f25247d01355f495505e8ea75c6b650f7c2b9a0c1906032ea56f503645e35e8282604051610e2e92919061216c565b60405180910390a15050565b610e426118cb565b60018281548110610e4f57fe5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fad5780601f10610f8257610100808354040283529160200191610fad565b820191906000526020600020905b815481529060010190602001808311610f9057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561104f5780601f106110245761010080835404028352916020019161104f565b820191906000526020600020905b81548152906001019060200180831161103257829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050919050565b606061108e610c46565b6110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c49061229b565b60405180910390fd5b6002805480602002602001604051908101604052809291908181526020016000905b8282101561124f57838290600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581525050815260200190600101906110ef565b50505050905090565b611260610bab565b61129f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112969061225b565b60405180910390fd5b600061132a6002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106112f057fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685858561153f565b90507f33a43a5f40642b7962e152d8df96057d081da4482e7adef69ddf86e2dc9ae711818460405161135d9291906122dd565b60405180910390a150505050565b611373610c46565b6113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a99061229b565b60405180910390fd5b6113bb8161179d565b50565b6113c661192f565b6113ce61192f565b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600015158152602001600115158152509050600060016002839080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906114a2929190611971565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550505003905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819250505092915050565b600033905090565b60006115496118cb565b6040518060c001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020014281526020016001151581525090506000600180839080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611682929190611971565b50606082015181600301908051906020019061169f929190611971565b506080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050039050806003856040516116e091906120cb565b908152602001604051809103902081905550600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508092505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561180d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118049061227b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119b257805160ff19168380011785556119e0565b828001600101855582156119e0579182015b828111156119df5782518255916020019190600101906119c4565b5b5090506119ed91906119f1565b5090565b611a1391905b80821115611a0f5760008160009055506001016119f7565b5090565b90565b600081359050611a25816124c7565b92915050565b600081519050611a3a816124de565b92915050565b600082601f830112611a5157600080fd5b8135611a64611a5f8261233a565b61230d565b91508082526020830160208301858383011115611a8057600080fd5b611a8b838284612474565b50505092915050565b600081359050611aa3816124f5565b92915050565b600060208284031215611abb57600080fd5b6000611ac984828501611a16565b91505092915050565b60008060408385031215611ae557600080fd5b6000611af385828601611a16565b925050602083013567ffffffffffffffff811115611b1057600080fd5b611b1c85828601611a40565b9150509250929050565b600080600060608486031215611b3b57600080fd5b6000611b4986828701611a16565b935050602084013567ffffffffffffffff811115611b6657600080fd5b611b7286828701611a40565b925050604084013567ffffffffffffffff811115611b8f57600080fd5b611b9b86828701611a40565b9150509250925092565b600060208284031215611bb757600080fd5b6000611bc584828501611a2b565b91505092915050565b60008060408385031215611be157600080fd5b600083013567ffffffffffffffff811115611bfb57600080fd5b611c0785828601611a40565b9250506020611c1885828601611a16565b9150509250929050565b600060208284031215611c3457600080fd5b6000611c4284828501611a94565b91505092915050565b6000611c57838361204a565b905092915050565b6000611c6b83836120ad565b60208301905092915050565b611c808161242c565b82525050565b611c8f8161242c565b82525050565b6000611ca082612386565b611caa81856123cc565b935083602082028501611cbc85612366565b8060005b85811015611cf85784840389528151611cd98582611c4b565b9450611ce4836123b2565b925060208a01995050600181019050611cc0565b50829750879550505050505092915050565b6000611d1582612391565b611d1f81856123dd565b9350611d2a83612376565b8060005b83811015611d5b578151611d428882611c5f565b9750611d4d836123bf565b925050600181019050611d2e565b5085935050505092915050565b611d718161243e565b82525050565b611d808161243e565b82525050565b6000611d91826123a7565b611d9b81856123ff565b9350611dab818560208601612483565b611db4816124b6565b840191505092915050565b6000611dca826123a7565b611dd48185612410565b9350611de4818560208601612483565b611ded816124b6565b840191505092915050565b6000611e03826123a7565b611e0d8185612421565b9350611e1d818560208601612483565b80840191505092915050565b6000611e348261239c565b611e3e81856123ee565b9350611e4e818560208601612483565b611e57816124b6565b840191505092915050565b6000611e6d8261239c565b611e7781856123ff565b9350611e87818560208601612483565b611e90816124b6565b840191505092915050565b6000611ea68261239c565b611eb08185612410565b9350611ec0818560208601612483565b611ec9816124b6565b840191505092915050565b6000611ee16016836123ff565b91507f497373756572206973206e6f7420747275737465642e000000000000000000006000830152602082019050919050565b6000611f216026836123ff565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f876020836123ff565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060c083016000830151611fd26000860182611c77565b506020830151611fe56020860182611c77565b5060408301518482036040860152611ffd8282611e29565b915050606083015184820360608601526120178282611e29565b915050608083015161202c60808601826120ad565b5060a083015161203f60a0860182611d68565b508091505092915050565b60006080830160008301516120626000860182611c77565b506020830151848203602086015261207a8282611e29565b915050604083015161208f6040860182611d68565b5060608301516120a26060860182611d68565b508091505092915050565b6120b68161246a565b82525050565b6120c58161246a565b82525050565b60006120d78284611df8565b915081905092915050565b60006020820190506120f76000830184611c86565b92915050565b600060c0820190506121126000830189611c86565b61211f6020830188611c86565b81810360408301526121318187611e62565b905081810360608301526121458186611e62565b905061215460808301856120bc565b61216160a0830184611d77565b979650505050505050565b60006040820190506121816000830185611c86565b81810360208301526121938184611d86565b90509392505050565b600060208201905081810360008301526121b68184611c95565b905092915050565b600060208201905081810360008301526121d88184611d0a565b905092915050565b60006020820190506121f56000830184611d77565b92915050565b60006040820190506122106000830185611d77565b61221d60208301846120bc565b9392505050565b6000604082019050818103600083015261223e8185611e9b565b905081810360208301526122528184611dbf565b90509392505050565b6000602082019050818103600083015261227481611ed4565b9050919050565b6000602082019050818103600083015261229481611f14565b9050919050565b600060208201905081810360008301526122b481611f7a565b9050919050565b600060208201905081810360008301526122d58184611fba565b905092915050565b60006040820190506122f260008301856120bc565b81810360208301526123048184611d86565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561233057600080fd5b8060405250919050565b600067ffffffffffffffff82111561235157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006124378261244a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156124a1578082015181840152602081019050612486565b838111156124b0576000848401525b50505050565b6000601f19601f8301169050919050565b6124d08161242c565b81146124db57600080fd5b50565b6124e78161243e565b81146124f257600080fd5b50565b6124fe8161246a565b811461250957600080fd5b5056fea365627a7a7231582054c9688374be1a109a42b22f5f2558dacaaca5961800ca1e59e6b495490482046c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c5780639d735caf116100665780639d735caf146101f4578063a594da9514610224578063e98ac4d814610242578063f2fde38b1461025e576100cf565b80638da5cb5b1461019c5780638f32d59b146101ba5780638fc0859a146101d8576100cf565b80632b43c5f1146100d45780633aceed30146100f057806364b3300314610121578063663b3e221461013f578063715018a6146101745780638d0624581461017e575b600080fd5b6100ee60048036036100e99190810190611ad2565b61027a565b005b61010a60048036036101059190810190611bce565b6103f5565b6040516101189291906121fb565b60405180910390f35b61012961079d565b60405161013691906121be565b60405180910390f35b61015960048036036101549190810190611c22565b6108df565b60405161016b969594939291906120fd565b60405180910390f35b61017c610aa5565b005b610186610bab565b60405161019391906121e0565b60405180910390f35b6101a4610c1d565b6040516101b191906120e2565b60405180910390f35b6101c2610c46565b6040516101cf91906121e0565b60405180910390f35b6101f260048036036101ed9190810190611ad2565b610ca4565b005b61020e60048036036102099190810190611c22565b610e3a565b60405161021b91906122bb565b60405180910390f35b61022c611084565b604051610239919061219c565b60405180910390f35b61025c60048036036102579190810190611b26565b611258565b005b61027860048036036102739190810190611aa9565b61136b565b005b610282610c46565b6102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b89061229b565b60405180910390fd5b6002600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061030d57fe5b906000526020600020906003020160020160019054906101000a900460ff16156103ac5760006002600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061037f57fe5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055506103b8565b6103b682826113be565b505b7f731003ff9638e352f896124100670675e1e4322e7dfc0fe1fb311969e6f94bf782826040516103e992919061216c565b60405180910390a15050565b600080600060038560405161040a91906120cb565b90815260200160405180910390205490506104236118cb565b6001828154811061043057fe5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058e5780601f106105635761010080835404028352916020019161058e565b820191906000526020600020905b81548152906001019060200180831161057157829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600115158160a001511515148015610701575073__StringUtils___________________________6346bdca9a8260600151886040518363ffffffff1660e01b81526004016106b0929190612224565b60206040518083038186803b1580156106c857600080fd5b505af41580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107009190810190611ba5565b5b801561077657508473ffffffffffffffffffffffffffffffffffffffff166001838154811061072c57fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561078957600182935093505050610796565b6000808090509350935050505b9250929050565b606080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405190808252806020026020018201604052801561080e5781602001602082028038833980820191505090505b509050600080905060008090505b600180549050811080156108305750825182105b156108d6573373ffffffffffffffffffffffffffffffffffffffff166001828154811061085957fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108c957808383815181106108b457fe5b60200260200101818152505081806001019250505b808060010191505061081c565b50819250505090565b600181815481106108ec57fe5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff16905086565b610aad610c46565b610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae39061229b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610bf957fe5b906000526020600020906003020160020160009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c88611537565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b610cac610c46565b610ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce29061229b565b60405180910390fd5b6002600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610d3757fe5b906000526020600020906003020160020160019054906101000a900460ff1615610dd65760016002600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610da957fe5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610dfd565b610dde61192f565b610de883836113be565b90506001816040019015159081151581525050505b7f71f25247d01355f495505e8ea75c6b650f7c2b9a0c1906032ea56f503645e35e8282604051610e2e92919061216c565b60405180910390a15050565b610e426118cb565b60018281548110610e4f57fe5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fad5780601f10610f8257610100808354040283529160200191610fad565b820191906000526020600020905b815481529060010190602001808311610f9057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561104f5780601f106110245761010080835404028352916020019161104f565b820191906000526020600020905b81548152906001019060200180831161103257829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050919050565b606061108e610c46565b6110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c49061229b565b60405180910390fd5b6002805480602002602001604051908101604052809291908181526020016000905b8282101561124f57838290600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581525050815260200190600101906110ef565b50505050905090565b611260610bab565b61129f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112969061225b565b60405180910390fd5b600061132a6002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106112f057fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685858561153f565b90507f33a43a5f40642b7962e152d8df96057d081da4482e7adef69ddf86e2dc9ae711818460405161135d9291906122dd565b60405180910390a150505050565b611373610c46565b6113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a99061229b565b60405180910390fd5b6113bb8161179d565b50565b6113c661192f565b6113ce61192f565b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600015158152602001600115158152509050600060016002839080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906114a2929190611971565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff021916908315150217905550505003905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819250505092915050565b600033905090565b60006115496118cb565b6040518060c001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020014281526020016001151581525090506000600180839080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611682929190611971565b50606082015181600301908051906020019061169f929190611971565b506080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055505050039050806003856040516116e091906120cb565b908152602001604051809103902081905550600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508092505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561180d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118049061227b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119b257805160ff19168380011785556119e0565b828001600101855582156119e0579182015b828111156119df5782518255916020019190600101906119c4565b5b5090506119ed91906119f1565b5090565b611a1391905b80821115611a0f5760008160009055506001016119f7565b5090565b90565b600081359050611a25816124c7565b92915050565b600081519050611a3a816124de565b92915050565b600082601f830112611a5157600080fd5b8135611a64611a5f8261233a565b61230d565b91508082526020830160208301858383011115611a8057600080fd5b611a8b838284612474565b50505092915050565b600081359050611aa3816124f5565b92915050565b600060208284031215611abb57600080fd5b6000611ac984828501611a16565b91505092915050565b60008060408385031215611ae557600080fd5b6000611af385828601611a16565b925050602083013567ffffffffffffffff811115611b1057600080fd5b611b1c85828601611a40565b9150509250929050565b600080600060608486031215611b3b57600080fd5b6000611b4986828701611a16565b935050602084013567ffffffffffffffff811115611b6657600080fd5b611b7286828701611a40565b925050604084013567ffffffffffffffff811115611b8f57600080fd5b611b9b86828701611a40565b9150509250925092565b600060208284031215611bb757600080fd5b6000611bc584828501611a2b565b91505092915050565b60008060408385031215611be157600080fd5b600083013567ffffffffffffffff811115611bfb57600080fd5b611c0785828601611a40565b9250506020611c1885828601611a16565b9150509250929050565b600060208284031215611c3457600080fd5b6000611c4284828501611a94565b91505092915050565b6000611c57838361204a565b905092915050565b6000611c6b83836120ad565b60208301905092915050565b611c808161242c565b82525050565b611c8f8161242c565b82525050565b6000611ca082612386565b611caa81856123cc565b935083602082028501611cbc85612366565b8060005b85811015611cf85784840389528151611cd98582611c4b565b9450611ce4836123b2565b925060208a01995050600181019050611cc0565b50829750879550505050505092915050565b6000611d1582612391565b611d1f81856123dd565b9350611d2a83612376565b8060005b83811015611d5b578151611d428882611c5f565b9750611d4d836123bf565b925050600181019050611d2e565b5085935050505092915050565b611d718161243e565b82525050565b611d808161243e565b82525050565b6000611d91826123a7565b611d9b81856123ff565b9350611dab818560208601612483565b611db4816124b6565b840191505092915050565b6000611dca826123a7565b611dd48185612410565b9350611de4818560208601612483565b611ded816124b6565b840191505092915050565b6000611e03826123a7565b611e0d8185612421565b9350611e1d818560208601612483565b80840191505092915050565b6000611e348261239c565b611e3e81856123ee565b9350611e4e818560208601612483565b611e57816124b6565b840191505092915050565b6000611e6d8261239c565b611e7781856123ff565b9350611e87818560208601612483565b611e90816124b6565b840191505092915050565b6000611ea68261239c565b611eb08185612410565b9350611ec0818560208601612483565b611ec9816124b6565b840191505092915050565b6000611ee16016836123ff565b91507f497373756572206973206e6f7420747275737465642e000000000000000000006000830152602082019050919050565b6000611f216026836123ff565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f876020836123ff565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060c083016000830151611fd26000860182611c77565b506020830151611fe56020860182611c77565b5060408301518482036040860152611ffd8282611e29565b915050606083015184820360608601526120178282611e29565b915050608083015161202c60808601826120ad565b5060a083015161203f60a0860182611d68565b508091505092915050565b60006080830160008301516120626000860182611c77565b506020830151848203602086015261207a8282611e29565b915050604083015161208f6040860182611d68565b5060608301516120a26060860182611d68565b508091505092915050565b6120b68161246a565b82525050565b6120c58161246a565b82525050565b60006120d78284611df8565b915081905092915050565b60006020820190506120f76000830184611c86565b92915050565b600060c0820190506121126000830189611c86565b61211f6020830188611c86565b81810360408301526121318187611e62565b905081810360608301526121458186611e62565b905061215460808301856120bc565b61216160a0830184611d77565b979650505050505050565b60006040820190506121816000830185611c86565b81810360208301526121938184611d86565b90509392505050565b600060208201905081810360008301526121b68184611c95565b905092915050565b600060208201905081810360008301526121d88184611d0a565b905092915050565b60006020820190506121f56000830184611d77565b92915050565b60006040820190506122106000830185611d77565b61221d60208301846120bc565b9392505050565b6000604082019050818103600083015261223e8185611e9b565b905081810360208301526122528184611dbf565b90509392505050565b6000602082019050818103600083015261227481611ed4565b9050919050565b6000602082019050818103600083015261229481611f14565b9050919050565b600060208201905081810360008301526122b481611f7a565b9050919050565b600060208201905081810360008301526122d58184611fba565b905092915050565b60006040820190506122f260008301856120bc565b81810360208301526123048184611d86565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561233057600080fd5b8060405250919050565b600067ffffffffffffffff82111561235157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006124378261244a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156124a1578082015181840152602081019050612486565b838111156124b0576000848401525b50505050565b6000601f19601f8301169050919050565b6124d08161242c565b81146124db57600080fd5b50565b6124e78161243e565b81146124f257600080fd5b50565b6124fe8161246a565b811461250957600080fd5b5056fea365627a7a7231582054c9688374be1a109a42b22f5f2558dacaaca5961800ca1e59e6b495490482046c6578706572696d656e74616cf564736f6c63430005100040",
  "sourceMap": "105:988:0:-;;;698:17:5;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;1184:20:1;;:::i;:::-;1207:32;1220:7;:5;;;:7;;:::i;:::-;1207:32;;;;;;;;;;;;;;;;;:12;;;:32;;:::i;:::-;1184:55;;1292:4;1249:7;1257:14;:23;1272:7;:5;;;:7;;:::i;:::-;1257:23;;;;;;;;;;;;;;;;1249:32;;;;;;;;;;;;;;;;;;:40;;;:47;;;;;;;;;;;;;;;;;;1307:89;1325:6;:13;;;1340:7;:5;;;:7;;:::i;:::-;1307:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:17;;;:89;;:::i;:::-;;1153:250;105:988:0;;788:96:4;833:15;867:10;860:17;;788:96;:::o;899:77:5:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;2723:300:1:-;2809:13;;:::i;:::-;2834:23;;:::i;:::-;2860:43;;;;;;;;2867:7;2860:43;;;;;;2876:13;2860:43;;;;2891:5;2860:43;;;;;;2898:4;2860:43;;;;;2834:69;;2913:7;2949:1;2923:7;2936:9;2923:23;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2923:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:27;2913:37;;2986:2;2960:14;:23;2975:7;2960:23;;;;;;;;;;;;;;;:28;;;;3007:9;3000:16;;;;2723:300;;;;:::o;3105:464::-;3230:18;3260:30;;:::i;:::-;3293:58;;;;;;;;3305:7;3293:58;;;;;;3314:6;3293:58;;;;;;3322:6;3293:58;;;;3330:9;3293:58;;;;3341:3;3293:58;;;;3346:4;3293:58;;;;;3260:91;;3361:7;3404:1;3371:12;3389:11;3371:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3371:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:34;3361:44;;3457:2;3415:28;3444:9;3415:39;;;;;;;;;;;;;;;;;;;;:44;;;;3470:16;:24;3487:6;3470:24;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;3506:22;:34;3529:10;3506:34;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;3560:2;3553:9;;;;3105:464;;;;;;:::o;105:988:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:360:-1:-;;135:39;168:5;135:39;;;186:89;268:6;263:3;186:89;;;179:96;;280:52;325:6;320:3;313:4;306:5;302:16;280:52;;;353:6;348:3;344:16;337:23;;115:250;;;;;;372:266;;518:95;609:3;600:6;518:95;;;511:102;;630:3;623:10;;499:139;;;;;645:122;;739:5;733:12;723:22;;704:63;;;;775:145;;911:3;896:18;;889:31;;;;;929:268;994:1;1001:101;1015:6;1012:1;1009:13;1001:101;;;1091:1;1086:3;1082:11;1076:18;1072:1;1067:3;1063:11;1056:39;1037:2;1034:1;1030:10;1025:15;;1001:101;;;1117:6;1114:1;1111:13;1108:2;;;1182:1;1173:6;1168:3;1164:16;1157:27;1108:2;978:219;;;;;105:988:0;;;;;;;",
  "deployedSourceMap": "105:988:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;105:988:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1917:339:1;;;;;;;;;;;;;;;;:::i;:::-;;4072:509;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;444:494:0;;;:::i;:::-;;;;;;;;;;;;;;;;729:33:1;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1684:137:5;;;:::i;:::-;;2335:131:1;;;:::i;:::-;;;;;;;;;;;;;;;;899:77:5;;;:::i;:::-;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;1460:399:1;;;;;;;;;;;;;;;;:::i;:::-;;228:143:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;990:101;;;:::i;:::-;;;;;;;;;;;;;;;;3663:281:1;;;;;;;;;;;;;;;;:::i;:::-;;1970:107:5;;;;;;;;;;;;;;;;:::i;:::-;;1917:339:1;1103:9:5;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2015:7:1;2023:14;:23;2038:7;2023:23;;;;;;;;;;;;;;;;2015:32;;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;2012:183;;;2112:5;2069:7;2077:14;:23;2092:7;2077:23;;;;;;;;;;;;;;;;2069:32;;;;;;;;;;;;;;;;;;:40;;;:48;;;;;;;;;;;;;;;;;;2012:183;;;2148:36;2161:7;2170:13;2148:12;:36::i;:::-;;2012:183;2210:39;2226:7;2235:13;2210:39;;;;;;;;;;;;;;;;1917:339;;:::o;4072:509::-;4169:18;4189:31;4232:11;4246:28;4275:9;4246:39;;;;;;;;;;;;;;;;;;;;;4232:53;;4295:31;;:::i;:::-;4329:12;4342:6;4329:20;;;;;;;;;;;;;;;;;;4295:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4385:4;4363:26;;:12;:18;;;:26;;;:88;;;;;4393:11;:17;4411:12;:28;;;4441:9;4393:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4393:58:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4393:58:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4393:58:1;;;;;;;;;4363:88;:137;;;;;4485:15;4455:45;;:12;4468:6;4455:20;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:45;;;4363:137;4360:188;;;4524:4;4530:6;4516:21;;;;;;;;4360:188;4565:5;4572:1;4557:17;;;;;;;;;4072:509;;;;;;:::o;444:494:0:-;499:31;542:32;588:16;:28;605:10;588:28;;;;;;;;;;;;;;;;577:40;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;577:40:0;;;;542:75;;627:12;642:1;627:16;;659:6;668:1;659:10;;654:242;675:12;:19;;;;671:1;:23;:62;;;;;708:18;:25;698:7;:35;671:62;654:242;;;783:10;758:35;;:12;771:1;758:15;;;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;:35;;;754:132;;;843:1;813:18;832:7;813:27;;;;;;;;;;;;;:31;;;;;862:9;;;;;;;754:132;735:3;;;;;;;654:242;;;;913:18;906:25;;;;444:494;:::o;729:33:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1684:137:5:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;2335:131:1:-;2383:14;2416:7;2424:14;:26;2439:10;2424:26;;;;;;;;;;;;;;;;2416:35;;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;2409:50;;2335:131;:::o;899:77:5:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;1460:399:1:-;1103:9:5;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1555:7:1;1563:14;:23;1578:7;1563:23;;;;;;;;;;;;;;;;1555:32;;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;1552:248;;;1652:4;1609:7;1617:14;:23;1632:7;1617:23;;;;;;;;;;;;;;;;1609:32;;;;;;;;;;;;;;;;;;:40;;;:47;;;;;;;;;;;;;;;;;;1552:248;;;1687:24;;:::i;:::-;1714:36;1727:7;1736:13;1714:12;:36::i;:::-;1687:63;;1785:4;1764:10;:18;;:25;;;;;;;;;;;1552:248;;1815:37;1829:7;1838:13;1815:37;;;;;;;;;;;;;;;;1460:399;;:::o;228:143:0:-;290:34;;:::i;:::-;343:12;356:7;343:21;;;;;;;;;;;;;;;;;;336:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;228:143;;;:::o;990:101::-;1043:15;1103:9:5;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1077:7:0;1070:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;990:101;:::o;3663:281:1:-;2606:17;:15;:17::i;:::-;2598:52;;;;;;;;;;;;;;;;;;;;;;3787:11;3801:88;3819:7;3827:14;:26;3842:10;3827:26;;;;;;;;;;;;;;;;3819:35;;;;;;;;;;;;;;;;;;:42;;;;;;;;;;;;3863:6;3871;3879:9;3801:17;:88::i;:::-;3787:102;;3904:33;3922:6;3930;3904:33;;;;;;;;;;;;;;;;2660:1;3663:281;;;:::o;1970:107:5:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;2723:300:1:-;2809:13;;:::i;:::-;2834:23;;:::i;:::-;2860:43;;;;;;;;2867:7;2860:43;;;;;;2876:13;2860:43;;;;2891:5;2860:43;;;;;;2898:4;2860:43;;;;;2834:69;;2913:7;2949:1;2923:7;2936:9;2923:23;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2923:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:27;2913:37;;2986:2;2960:14;:23;2975:7;2960:23;;;;;;;;;;;;;;;:28;;;;3007:9;3000:16;;;;2723:300;;;;:::o;788:96:4:-;833:15;867:10;860:17;;788:96;:::o;3105:464:1:-;3230:18;3260:30;;:::i;:::-;3293:58;;;;;;;;3305:7;3293:58;;;;;;3314:6;3293:58;;;;;;3322:6;3293:58;;;;3330:9;3293:58;;;;3341:3;3293:58;;;;3346:4;3293:58;;;;;3260:91;;3361:7;3404:1;3371:12;3389:11;3371:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3371:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:34;3361:44;;3457:2;3415:28;3444:9;3415:39;;;;;;;;;;;;;;;;;;;;:44;;;;3470:16;:24;3487:6;3470:24;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;3506:22;:34;3529:10;3506:34;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;3560:2;3553:9;;;;3105:464;;;;;;:::o;2178:225:5:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;105:988:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;142:128;;223:6;217:13;208:22;;235:30;259:5;235:30;;;202:68;;;;;278:442;;380:3;373:4;365:6;361:17;357:27;347:2;;398:1;395;388:12;347:2;435:6;422:20;457:65;472:49;514:6;472:49;;;457:65;;;448:74;;542:6;535:5;528:21;578:4;570:6;566:17;611:4;604:5;600:16;646:3;637:6;632:3;628:16;625:25;622:2;;;663:1;660;653:12;622:2;673:41;707:6;702:3;697;673:41;;;340:380;;;;;;;;728:130;;808:6;795:20;786:29;;820:33;847:5;820:33;;;780:78;;;;;865:241;;969:2;957:9;948:7;944:23;940:32;937:2;;;985:1;982;975:12;937:2;1020:1;1037:53;1082:7;1073:6;1062:9;1058:22;1037:53;;;1027:63;;999:97;931:175;;;;;1113:472;;;1244:2;1232:9;1223:7;1219:23;1215:32;1212:2;;;1260:1;1257;1250:12;1212:2;1295:1;1312:53;1357:7;1348:6;1337:9;1333:22;1312:53;;;1302:63;;1274:97;1430:2;1419:9;1415:18;1402:32;1454:18;1446:6;1443:30;1440:2;;;1486:1;1483;1476:12;1440:2;1506:63;1561:7;1552:6;1541:9;1537:22;1506:63;;;1496:73;;1381:194;1206:379;;;;;;1592:703;;;;1750:2;1738:9;1729:7;1725:23;1721:32;1718:2;;;1766:1;1763;1756:12;1718:2;1801:1;1818:53;1863:7;1854:6;1843:9;1839:22;1818:53;;;1808:63;;1780:97;1936:2;1925:9;1921:18;1908:32;1960:18;1952:6;1949:30;1946:2;;;1992:1;1989;1982:12;1946:2;2012:63;2067:7;2058:6;2047:9;2043:22;2012:63;;;2002:73;;1887:194;2140:2;2129:9;2125:18;2112:32;2164:18;2156:6;2153:30;2150:2;;;2196:1;2193;2186:12;2150:2;2216:63;2271:7;2262:6;2251:9;2247:22;2216:63;;;2206:73;;2091:194;1712:583;;;;;;2302:257;;2414:2;2402:9;2393:7;2389:23;2385:32;2382:2;;;2430:1;2427;2420:12;2382:2;2465:1;2482:61;2535:7;2526:6;2515:9;2511:22;2482:61;;;2472:71;;2444:105;2376:183;;;;;2566:472;;;2697:2;2685:9;2676:7;2672:23;2668:32;2665:2;;;2713:1;2710;2703:12;2665:2;2776:1;2765:9;2761:17;2748:31;2799:18;2791:6;2788:30;2785:2;;;2831:1;2828;2821:12;2785:2;2851:63;2906:7;2897:6;2886:9;2882:22;2851:63;;;2841:73;;2727:193;2951:2;2969:53;3014:7;3005:6;2994:9;2990:22;2969:53;;;2959:63;;2930:98;2659:379;;;;;;3045:241;;3149:2;3137:9;3128:7;3124:23;3120:32;3117:2;;;3165:1;3162;3155:12;3117:2;3200:1;3217:53;3262:7;3253:6;3242:9;3238:22;3217:53;;;3207:63;;3179:97;3111:175;;;;;3294:233;;3433:88;3517:3;3509:6;3433:88;;;3419:102;;3412:115;;;;;3536:173;;3623:46;3665:3;3657:6;3623:46;;;3698:4;3693:3;3689:14;3675:28;;3616:93;;;;;3717:103;3790:24;3808:5;3790:24;;;3785:3;3778:37;3772:48;;;3827:113;3910:24;3928:5;3910:24;;;3905:3;3898:37;3892:48;;;4032:1000;;4215:73;4282:5;4215:73;;;4301:105;4399:6;4394:3;4301:105;;;4294:112;;4429:3;4471:4;4463:6;4459:17;4454:3;4450:27;4498:75;4567:5;4498:75;;;4593:7;4621:1;4606:387;4631:6;4628:1;4625:13;4606:387;;;4693:9;4687:4;4683:20;4678:3;4671:33;4738:6;4732:13;4760:102;4857:4;4842:13;4760:102;;;4752:110;;4879:79;4951:6;4879:79;;;4869:89;;4981:4;4976:3;4972:14;4965:21;;4663:330;4653:1;4650;4646:9;4641:14;;4606:387;;;4610:14;5006:4;4999:11;;5023:3;5016:10;;4194:838;;;;;;;;;;5071:690;;5216:54;5264:5;5216:54;;;5283:86;5362:6;5357:3;5283:86;;;5276:93;;5390:56;5440:5;5390:56;;;5466:7;5494:1;5479:260;5504:6;5501:1;5498:13;5479:260;;;5571:6;5565:13;5592:63;5651:3;5636:13;5592:63;;;5585:70;;5672:60;5725:6;5672:60;;;5662:70;;5536:203;5526:1;5523;5519:9;5514:14;;5479:260;;;5483:14;5752:3;5745:10;;5195:566;;;;;;;;5769:94;5836:21;5851:5;5836:21;;;5831:3;5824:34;5818:45;;;5870:104;5947:21;5962:5;5947:21;;;5942:3;5935:34;5929:45;;;5981:347;;6093:39;6126:5;6093:39;;;6144:71;6208:6;6203:3;6144:71;;;6137:78;;6220:52;6265:6;6260:3;6253:4;6246:5;6242:16;6220:52;;;6293:29;6315:6;6293:29;;;6288:3;6284:39;6277:46;;6073:255;;;;;;6335:363;;6455:39;6488:5;6455:39;;;6506:79;6578:6;6573:3;6506:79;;;6499:86;;6590:52;6635:6;6630:3;6623:4;6616:5;6612:16;6590:52;;;6663:29;6685:6;6663:29;;;6658:3;6654:39;6647:46;;6435:263;;;;;;6705:360;;6835:39;6868:5;6835:39;;;6886:89;6968:6;6963:3;6886:89;;;6879:96;;6980:52;7025:6;7020:3;7013:4;7006:5;7002:16;6980:52;;;7053:6;7048:3;7044:16;7037:23;;6815:250;;;;;;7072:319;;7170:35;7199:5;7170:35;;;7217:61;7271:6;7266:3;7217:61;;;7210:68;;7283:52;7328:6;7323:3;7316:4;7309:5;7305:16;7283:52;;;7356:29;7378:6;7356:29;;;7351:3;7347:39;7340:46;;7150:241;;;;;;7398:339;;7506:35;7535:5;7506:35;;;7553:71;7617:6;7612:3;7553:71;;;7546:78;;7629:52;7674:6;7669:3;7662:4;7655:5;7651:16;7629:52;;;7702:29;7724:6;7702:29;;;7697:3;7693:39;7686:46;;7486:251;;;;;;7744:355;;7860:35;7889:5;7860:35;;;7907:79;7979:6;7974:3;7907:79;;;7900:86;;7991:52;8036:6;8031:3;8024:4;8017:5;8013:16;7991:52;;;8064:29;8086:6;8064:29;;;8059:3;8055:39;8048:46;;7840:259;;;;;;8107:322;;8267:67;8331:2;8326:3;8267:67;;;8260:74;;8367:24;8363:1;8358:3;8354:11;8347:45;8420:2;8415:3;8411:12;8404:19;;8253:176;;;;8438:375;;8598:67;8662:2;8657:3;8598:67;;;8591:74;;8698:34;8694:1;8689:3;8685:11;8678:55;8767:8;8762:2;8757:3;8753:12;8746:30;8804:2;8799:3;8795:12;8788:19;;8584:229;;;;8822:332;;8982:67;9046:2;9041:3;8982:67;;;8975:74;;9082:34;9078:1;9073:3;9069:11;9062:55;9145:2;9140:3;9136:12;9129:19;;8968:186;;;;9251:1275;;9408:4;9403:3;9399:14;9493:4;9486:5;9482:16;9476:23;9505:63;9562:4;9557:3;9553:14;9539:12;9505:63;;;9428:146;9648:4;9641:5;9637:16;9631:23;9660:63;9717:4;9712:3;9708:14;9694:12;9660:63;;;9584:145;9803:4;9796:5;9792:16;9786:23;9855:3;9849:4;9845:14;9838:4;9833:3;9829:14;9822:38;9875:69;9939:4;9925:12;9875:69;;;9867:77;;9739:217;10040:4;10033:5;10029:16;10023:23;10092:3;10086:4;10082:14;10075:4;10070:3;10066:14;10059:38;10112:69;10176:4;10162:12;10112:69;;;10104:77;;9966:227;10270:4;10263:5;10259:16;10253:23;10282:63;10339:4;10334:3;10330:14;10316:12;10282:63;;;10203:148;10425:4;10418:5;10414:16;10408:23;10437:57;10488:4;10483:3;10479:14;10465:12;10437:57;;;10361:139;10517:4;10510:11;;9381:1145;;;;;;10612:859;;10745:4;10740:3;10736:14;10830:4;10823:5;10819:16;10813:23;10842:63;10899:4;10894:3;10890:14;10876:12;10842:63;;;10765:146;10992:4;10985:5;10981:16;10975:23;11044:3;11038:4;11034:14;11027:4;11022:3;11018:14;11011:38;11064:69;11128:4;11114:12;11064:69;;;11056:77;;10921:224;11221:4;11214:5;11210:16;11204:23;11233:57;11284:4;11279:3;11275:14;11261:12;11233:57;;;11155:141;11370:4;11363:5;11359:16;11353:23;11382:57;11433:4;11428:3;11424:14;11410:12;11382:57;;;11306:139;11462:4;11455:11;;10718:753;;;;;;11478:103;11551:24;11569:5;11551:24;;;11546:3;11539:37;11533:48;;;11588:113;11671:24;11689:5;11671:24;;;11666:3;11659:37;11653:48;;;11708:266;;11854:95;11945:3;11936:6;11854:95;;;11847:102;;11966:3;11959:10;;11835:139;;;;;11981:213;;12099:2;12088:9;12084:18;12076:26;;12113:71;12181:1;12170:9;12166:17;12157:6;12113:71;;;12070:124;;;;;12201:919;;12485:3;12474:9;12470:19;12462:27;;12500:71;12568:1;12557:9;12553:17;12544:6;12500:71;;;12582:72;12650:2;12639:9;12635:18;12626:6;12582:72;;;12702:9;12696:4;12692:20;12687:2;12676:9;12672:18;12665:48;12727:74;12796:4;12787:6;12727:74;;;12719:82;;12849:9;12843:4;12839:20;12834:2;12823:9;12819:18;12812:48;12874:74;12943:4;12934:6;12874:74;;;12866:82;;12959:73;13027:3;13016:9;13012:19;13003:6;12959:73;;;13043:67;13105:3;13094:9;13090:19;13081:6;13043:67;;;12456:664;;;;;;;;;;13127:412;;13293:2;13282:9;13278:18;13270:26;;13307:71;13375:1;13364:9;13360:17;13351:6;13307:71;;;13426:9;13420:4;13416:20;13411:2;13400:9;13396:18;13389:48;13451:78;13524:4;13515:6;13451:78;;;13443:86;;13264:275;;;;;;13546:437;;13752:2;13741:9;13737:18;13729:26;;13802:9;13796:4;13792:20;13788:1;13777:9;13773:17;13766:47;13827:146;13968:4;13959:6;13827:146;;;13819:154;;13723:260;;;;;13990:361;;14158:2;14147:9;14143:18;14135:26;;14208:9;14202:4;14198:20;14194:1;14183:9;14179:17;14172:47;14233:108;14336:4;14327:6;14233:108;;;14225:116;;14129:222;;;;;14358:201;;14470:2;14459:9;14455:18;14447:26;;14484:65;14546:1;14535:9;14531:17;14522:6;14484:65;;;14441:118;;;;;14566:312;;14706:2;14695:9;14691:18;14683:26;;14720:65;14782:1;14771:9;14767:17;14758:6;14720:65;;;14796:72;14864:2;14853:9;14849:18;14840:6;14796:72;;;14677:201;;;;;;14885:516;;15075:2;15064:9;15060:18;15052:26;;15125:9;15119:4;15115:20;15111:1;15100:9;15096:17;15089:47;15150:82;15227:4;15218:6;15150:82;;;15142:90;;15280:9;15274:4;15270:20;15265:2;15254:9;15250:18;15243:48;15305:86;15386:4;15377:6;15305:86;;;15297:94;;15046:355;;;;;;15408:407;;15599:2;15588:9;15584:18;15576:26;;15649:9;15643:4;15639:20;15635:1;15624:9;15620:17;15613:47;15674:131;15800:4;15674:131;;;15666:139;;15570:245;;;;15822:407;;16013:2;16002:9;15998:18;15990:26;;16063:9;16057:4;16053:20;16049:1;16038:9;16034:17;16027:47;16088:131;16214:4;16088:131;;;16080:139;;15984:245;;;;16236:407;;16427:2;16416:9;16412:18;16404:26;;16477:9;16471:4;16467:20;16463:1;16452:9;16448:17;16441:47;16502:131;16628:4;16502:131;;;16494:139;;16398:245;;;;16650:373;;16824:2;16813:9;16809:18;16801:26;;16874:9;16868:4;16864:20;16860:1;16849:9;16845:17;16838:47;16899:114;17008:4;16999:6;16899:114;;;16891:122;;16795:228;;;;;17030:412;;17196:2;17185:9;17181:18;17173:26;;17210:71;17278:1;17267:9;17263:17;17254:6;17210:71;;;17329:9;17323:4;17319:20;17314:2;17303:9;17299:18;17292:48;17354:78;17427:4;17418:6;17354:78;;;17346:86;;17167:275;;;;;;17449:256;;17511:2;17505:9;17495:19;;17549:4;17541:6;17537:17;17648:6;17636:10;17633:22;17612:18;17600:10;17597:34;17594:62;17591:2;;;17669:1;17666;17659:12;17591:2;17689:10;17685:2;17678:22;17489:216;;;;;17712:322;;17856:18;17848:6;17845:30;17842:2;;;17888:1;17885;17878:12;17842:2;17955:4;17951:9;17944:4;17936:6;17932:17;17928:33;17920:41;;18019:4;18013;18009:15;18001:23;;17779:255;;;;18041:170;;18146:3;18138:11;;18184:4;18179:3;18175:14;18167:22;;18132:79;;;;18218:151;;18304:3;18296:11;;18342:4;18337:3;18333:14;18325:22;;18290:79;;;;18376:156;;18504:5;18498:12;18488:22;;18469:63;;;;18539:137;;18648:5;18642:12;18632:22;;18613:63;;;;18683:118;;18773:5;18767:12;18757:22;;18738:63;;;;18808:122;;18902:5;18896:12;18886:22;;18867:63;;;;18937:127;;19054:4;19049:3;19045:14;19037:22;;19031:33;;;;19071:108;;19169:4;19164:3;19160:14;19152:22;;19146:33;;;;19187:197;;19336:6;19331:3;19324:19;19373:4;19368:3;19364:14;19349:29;;19317:67;;;;;19393:178;;19523:6;19518:3;19511:19;19560:4;19555:3;19551:14;19536:29;;19504:67;;;;;19580:153;;19685:6;19680:3;19673:19;19722:4;19717:3;19713:14;19698:29;;19666:67;;;;;19742:163;;19857:6;19852:3;19845:19;19894:4;19889:3;19885:14;19870:29;;19838:67;;;;;19914:171;;20037:6;20032:3;20025:19;20074:4;20069:3;20065:14;20050:29;;20018:67;;;;;20094:145;;20230:3;20215:18;;20208:31;;;;;20247:91;;20309:24;20327:5;20309:24;;;20298:35;;20292:46;;;;20345:85;;20418:5;20411:13;20404:21;20393:32;;20387:43;;;;20437:121;;20510:42;20503:5;20499:54;20488:65;;20482:76;;;;20565:72;;20627:5;20616:16;;20610:27;;;;20645:145;20726:6;20721:3;20716;20703:30;20782:1;20773:6;20768:3;20764:16;20757:27;20696:94;;;;20799:268;20864:1;20871:101;20885:6;20882:1;20879:13;20871:101;;;20961:1;20956:3;20952:11;20946:18;20942:1;20937:3;20933:11;20926:39;20907:2;20904:1;20900:10;20895:15;;20871:101;;;20987:6;20984:1;20981:13;20978:2;;;21052:1;21043:6;21038:3;21034:16;21027:27;20978:2;20848:219;;;;;21075:97;;21163:2;21159:7;21154:2;21147:5;21143:14;21139:28;21129:38;;21123:49;;;;21180:117;21249:24;21267:5;21249:24;;;21242:5;21239:35;21229:2;;21288:1;21285;21278:12;21229:2;21223:74;;21304:111;21370:21;21385:5;21370:21;;;21363:5;21360:32;21350:2;;21406:1;21403;21396:12;21350:2;21344:71;;21422:117;21491:24;21509:5;21491:24;;;21484:5;21481:35;21471:2;;21530:1;21527;21520:12;21471:2;21465:74;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./CertificateStoreCore.sol\";\n\ncontract CertificateStore is CertificateStoreCore {\n    /**\n    * @dev Return certificate matching th given id;\n    */\n    function getCertificateById(uint _certId) public view returns(Certificate memory allCertificates) {\n        return certificates[_certId];\n    }\n\n    /**\n    * @dev Returns certificates owned by the caller\n    */\n    function getOwnedCertificatesId() public view returns (uint[] memory ownedCertificates) {\n        uint[] memory _ownedCertificates = new uint[](certificateCount[msg.sender]);\n        uint current = 0;\n\n        for (uint i = 0; i < certificates.length && current < _ownedCertificates.length; i++) {\n            if (certificates[i].owner == msg.sender) {\n                _ownedCertificates[current] = i;\n                current++;\n            }\n        }\n\n        return _ownedCertificates;\n    }\n\n    /**\n    * @dev Returns all issuers\n    */\n    function getIssuers() public view onlyOwner returns (Issuer[] memory) {\n        return issuers;\n    }\n}\n",
  "sourcePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
  "ast": {
    "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
    "exportedSymbols": {
      "CertificateStore": [
        91
      ]
    },
    "id": 92,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:33:0"
      },
      {
        "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol",
        "file": "./CertificateStoreCore.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 92,
        "sourceUnit": 474,
        "src": "67:36:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "CertificateStoreCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 473,
              "src": "134:20:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateStoreCore_$473",
                "typeString": "contract CertificateStoreCore"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "134:20:0"
          }
        ],
        "contractDependencies": [
          473,
          770,
          888
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 91,
        "linearizedBaseContracts": [
          91,
          473,
          888,
          770
        ],
        "name": "CertificateStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "326:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 12,
                      "name": "certificates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "343:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                        "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                      }
                    },
                    "id": 14,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 13,
                      "name": "_certId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "356:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "343:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$138_storage",
                      "typeString": "struct CertificateStoreCore.Certificate storage ref"
                    }
                  },
                  "functionReturnParameters": 11,
                  "id": 15,
                  "nodeType": "Return",
                  "src": "336:28:0"
                }
              ]
            },
            "documentation": "@dev Return certificate matching th given id;",
            "id": 17,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCertificateById",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "_certId",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "256:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "256:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "255:14:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "allCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "290:34:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Certificate_$138_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Certificate"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 9,
                    "name": "Certificate",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 138,
                    "src": "290:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$138_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Certificate"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "289:36:0"
            },
            "scope": 91,
            "src": "228:143:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "532:406:0",
              "statements": [
                {
                  "assignments": [
                    26
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26,
                      "name": "_ownedCertificates",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "542:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 24,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "542:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 25,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 35,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 30,
                          "name": "certificateCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 156,
                          "src": "588:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 33,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 31,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 903,
                            "src": "605:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 32,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "605:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "588:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "577:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                        "typeString": "function (uint256) pure returns (uint256[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 27,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "581:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "581:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "577:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "542:75:0"
                },
                {
                  "assignments": [
                    37
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 37,
                      "name": "current",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "627:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "627:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 39,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "642:1:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "627:16:0"
                },
                {
                  "body": {
                    "id": 74,
                    "nodeType": "Block",
                    "src": "740:156:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 62,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 56,
                                "name": "certificates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 141,
                                "src": "758:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                                  "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                                }
                              },
                              "id": 58,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 57,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "771:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "758:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Certificate_$138_storage",
                                "typeString": "struct CertificateStoreCore.Certificate storage ref"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 129,
                            "src": "758:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 903,
                              "src": "783:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "783:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "758:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 73,
                        "nodeType": "IfStatement",
                        "src": "754:132:0",
                        "trueBody": {
                          "id": 72,
                          "nodeType": "Block",
                          "src": "795:91:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 67,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 63,
                                    "name": "_ownedCertificates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "813:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 65,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 64,
                                    "name": "current",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 37,
                                    "src": "832:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "813:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 66,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 41,
                                  "src": "843:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "813:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 68,
                              "nodeType": "ExpressionStatement",
                              "src": "813:31:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 70,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "862:9:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 69,
                                  "name": "current",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 37,
                                  "src": "862:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 71,
                              "nodeType": "ExpressionStatement",
                              "src": "862:9:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 52,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 47,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "671:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 45,
                          "name": "certificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 141,
                          "src": "675:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                            "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "675:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "671:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 51,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "current",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "698:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "_ownedCertificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "708:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 50,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "698:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "671:62:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 75,
                  "initializationExpression": {
                    "assignments": [
                      41
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 41,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "659:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 43,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "668:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "659:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "735:3:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "735:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 55,
                    "nodeType": "ExpressionStatement",
                    "src": "735:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "654:242:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "name": "_ownedCertificates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26,
                    "src": "913:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "functionReturnParameters": 22,
                  "id": 77,
                  "nodeType": "Return",
                  "src": "906:25:0"
                }
              ]
            },
            "documentation": "@dev Returns certificates owned by the caller",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOwnedCertificatesId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "475:2:0"
            },
            "returnParameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "ownedCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "499:31:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "499:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 20,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "499:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "498:33:0"
            },
            "scope": 91,
            "src": "444:494:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "1060:31:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "name": "issuers",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 144,
                    "src": "1077:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Issuer_$125_storage_$dyn_storage",
                      "typeString": "struct CertificateStoreCore.Issuer storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 86,
                  "id": 88,
                  "nodeType": "Return",
                  "src": "1070:14:0"
                }
              ]
            },
            "documentation": "@dev Returns all issuers",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 82,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 81,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 821,
                  "src": "1024:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1024:9:0"
              }
            ],
            "name": "getIssuers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1009:2:0"
            },
            "returnParameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 90,
                  "src": "1043:15:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Issuer_$125_memory_$dyn_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Issuer[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 83,
                      "name": "Issuer",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 125,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Issuer_$125_storage_ptr",
                        "typeString": "struct CertificateStoreCore.Issuer"
                      }
                    },
                    "id": 84,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1043:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Issuer_$125_storage_$dyn_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Issuer[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1042:17:0"
            },
            "scope": 91,
            "src": "990:101:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 92,
        "src": "105:988:0"
      }
    ],
    "src": "0:1094:0"
  },
  "legacyAST": {
    "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStore.sol",
    "exportedSymbols": {
      "CertificateStore": [
        91
      ]
    },
    "id": 92,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:33:0"
      },
      {
        "absolutePath": "/home/guillaume/Ynov/M1_Blockchain/certynov/certynov/contracts/CertificateStoreCore.sol",
        "file": "./CertificateStoreCore.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 92,
        "sourceUnit": 474,
        "src": "67:36:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "CertificateStoreCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 473,
              "src": "134:20:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CertificateStoreCore_$473",
                "typeString": "contract CertificateStoreCore"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "134:20:0"
          }
        ],
        "contractDependencies": [
          473,
          770,
          888
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 91,
        "linearizedBaseContracts": [
          91,
          473,
          888,
          770
        ],
        "name": "CertificateStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "326:45:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 12,
                      "name": "certificates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 141,
                      "src": "343:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                        "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                      }
                    },
                    "id": 14,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 13,
                      "name": "_certId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "356:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "343:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$138_storage",
                      "typeString": "struct CertificateStoreCore.Certificate storage ref"
                    }
                  },
                  "functionReturnParameters": 11,
                  "id": 15,
                  "nodeType": "Return",
                  "src": "336:28:0"
                }
              ]
            },
            "documentation": "@dev Return certificate matching th given id;",
            "id": 17,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCertificateById",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "_certId",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "256:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "256:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "255:14:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "allCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "290:34:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Certificate_$138_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Certificate"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 9,
                    "name": "Certificate",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 138,
                    "src": "290:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Certificate_$138_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Certificate"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "289:36:0"
            },
            "scope": 91,
            "src": "228:143:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "532:406:0",
              "statements": [
                {
                  "assignments": [
                    26
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26,
                      "name": "_ownedCertificates",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "542:32:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 24,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "542:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 25,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 35,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 30,
                          "name": "certificateCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 156,
                          "src": "588:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 33,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 31,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 903,
                            "src": "605:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 32,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "605:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "588:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "577:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
                        "typeString": "function (uint256) pure returns (uint256[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 27,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "581:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "581:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "577:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "542:75:0"
                },
                {
                  "assignments": [
                    37
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 37,
                      "name": "current",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "627:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "627:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 39,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "642:1:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "627:16:0"
                },
                {
                  "body": {
                    "id": 74,
                    "nodeType": "Block",
                    "src": "740:156:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 62,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 56,
                                "name": "certificates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 141,
                                "src": "758:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                                  "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                                }
                              },
                              "id": 58,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 57,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "771:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "758:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Certificate_$138_storage",
                                "typeString": "struct CertificateStoreCore.Certificate storage ref"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 129,
                            "src": "758:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 60,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 903,
                              "src": "783:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "783:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "758:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 73,
                        "nodeType": "IfStatement",
                        "src": "754:132:0",
                        "trueBody": {
                          "id": 72,
                          "nodeType": "Block",
                          "src": "795:91:0",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 67,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 63,
                                    "name": "_ownedCertificates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 26,
                                    "src": "813:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 65,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 64,
                                    "name": "current",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 37,
                                    "src": "832:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "813:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "id": 66,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 41,
                                  "src": "843:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "813:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 68,
                              "nodeType": "ExpressionStatement",
                              "src": "813:31:0"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 70,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "862:9:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 69,
                                  "name": "current",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 37,
                                  "src": "862:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 71,
                              "nodeType": "ExpressionStatement",
                              "src": "862:9:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 52,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 47,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "671:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 45,
                          "name": "certificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 141,
                          "src": "675:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Certificate_$138_storage_$dyn_storage",
                            "typeString": "struct CertificateStoreCore.Certificate storage ref[] storage ref"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "675:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "671:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 51,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 48,
                        "name": "current",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "698:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 49,
                          "name": "_ownedCertificates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "708:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 50,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "698:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "671:62:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 75,
                  "initializationExpression": {
                    "assignments": [
                      41
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 41,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "659:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "659:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 43,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "668:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "659:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "735:3:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "735:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 55,
                    "nodeType": "ExpressionStatement",
                    "src": "735:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "654:242:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 76,
                    "name": "_ownedCertificates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26,
                    "src": "913:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  "functionReturnParameters": 22,
                  "id": 77,
                  "nodeType": "Return",
                  "src": "906:25:0"
                }
              ]
            },
            "documentation": "@dev Returns certificates owned by the caller",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOwnedCertificatesId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "475:2:0"
            },
            "returnParameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "ownedCertificates",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "499:31:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "499:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 20,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "499:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "498:33:0"
            },
            "scope": 91,
            "src": "444:494:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "1060:31:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "name": "issuers",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 144,
                    "src": "1077:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Issuer_$125_storage_$dyn_storage",
                      "typeString": "struct CertificateStoreCore.Issuer storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 86,
                  "id": 88,
                  "nodeType": "Return",
                  "src": "1070:14:0"
                }
              ]
            },
            "documentation": "@dev Returns all issuers",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 82,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 81,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 821,
                  "src": "1024:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1024:9:0"
              }
            ],
            "name": "getIssuers",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1009:2:0"
            },
            "returnParameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 90,
                  "src": "1043:15:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Issuer_$125_memory_$dyn_memory_ptr",
                    "typeString": "struct CertificateStoreCore.Issuer[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 83,
                      "name": "Issuer",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 125,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Issuer_$125_storage_ptr",
                        "typeString": "struct CertificateStoreCore.Issuer"
                      }
                    },
                    "id": 84,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1043:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Issuer_$125_storage_$dyn_storage_ptr",
                      "typeString": "struct CertificateStoreCore.Issuer[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1042:17:0"
            },
            "scope": 91,
            "src": "990:101:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 92,
        "src": "105:988:0"
      }
    ],
    "src": "0:1094:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x33a43a5f40642b7962e152d8df96057d081da4482e7adef69ddf86e2dc9ae711": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_title",
              "type": "string"
            }
          ],
          "name": "CertificateStored",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x71f25247d01355f495505e8ea75c6b650f7c2b9a0c1906032ea56f503645e35e": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_organization",
              "type": "string"
            }
          ],
          "name": "TrustedIssuer",
          "type": "event"
        },
        "0x731003ff9638e352f896124100670675e1e4322e7dfc0fe1fb311969e6f94bf7": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_organization",
              "type": "string"
            }
          ],
          "name": "UntrustedIssuer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x8a5Abdf85e0486F5D9FA0943E2a24E7F8151A0e2",
      "transactionHash": "0xf5a7f851bc8b35a6c3a4f37e1609a9c9314aa8cedcefda340aae552ea8bfe9eb"
    }
  },
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-04-17T15:04:15.856Z",
  "devdoc": {
    "methods": {
      "addIssuer(address,string)": {
        "details": "Add a new trusted issuer"
      },
      "authenticateHash(string,address)": {
        "details": "Returns true and the certificate id if the given certificate hash and the pretended owner match"
      },
      "getCertificateById(uint256)": {
        "details": "Return certificate matching th given id;"
      },
      "getIssuers()": {
        "details": "Returns all issuers"
      },
      "getOwnedCertificatesId()": {
        "details": "Returns certificates owned by the caller"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isTrustedIssuer()": {
        "details": "Returns true if the caller is a trusted issuer"
      },
      "issueCertificate(address,string,string)": {
        "details": "Issue a new certificate from input data (only trusted issuer)"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeIssuer(address,string)": {
        "details": "Revoke an existing issuer"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}